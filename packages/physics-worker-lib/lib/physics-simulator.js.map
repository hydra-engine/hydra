{"version":3,"file":"physics-simulator.js","sourceRoot":"","sources":["../src/physics-simulator.ts"],"names":[],"mappings":"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","sourcesContent":["import { BodyDescriptor, NONE, ObjectStateTree, ObjectType, WorldDescriptor } from '@hydraengine/shared'\nimport { PhysicsObject } from './physics-node/physics-object'\nimport { PhysicsWorld } from './physics-node/physics-world'\n\nexport class PhysicsSimulator {\n  readonly #stateTree: ObjectStateTree\n  readonly #worldDescriptors: Record<number, WorldDescriptor>\n  readonly #bodyDescriptors: Record<number, BodyDescriptor>\n\n  #worlds = new Map<number, PhysicsWorld>()\n  #objects = new Map<number, PhysicsObject>()\n  #simulationStep = 0\n\n  constructor(\n    readonly stateTree: ObjectStateTree,\n    readonly worldDescriptors: Record<number, WorldDescriptor>,\n    readonly bodyDescriptors: Record<number, BodyDescriptor>,\n  ) {\n    this.#stateTree = stateTree\n    this.#worldDescriptors = worldDescriptors\n    this.#bodyDescriptors = bodyDescriptors\n  }\n\n  update(dt: number) {\n    const dts = dt * 1000\n    const matterDt = dts > 16.666 ? 16.666 : dts\n    this.#worlds.forEach((world) => world.update(matterDt))\n\n    const step = ++this.#simulationStep\n    const tree = this.#stateTree\n    tree.forEach((id) => {\n      const objectType = tree.getObjectType(id)\n\n      if (objectType === ObjectType.PhysicsWorld) {\n        let world = this.#worlds.get(id)\n        if (!world) {\n          const worldId = tree.getWorldId(id)\n          const wd = this.#worldDescriptors[worldId]\n          if (wd) {\n            world = new PhysicsWorld(wd.gravity)\n            this.#worlds.set(id, world)\n          }\n        }\n        if (world) world.processedStep = step\n      }\n\n      if (objectType === ObjectType.PhysicsObject) {\n        let object = this.#objects.get(id)\n        if (!object) {\n          const bodyId = tree.getBodyId(id)\n          const bd = this.#bodyDescriptors[bodyId]\n          if (bd) {\n            object = new PhysicsObject(tree.getLocalX(id), tree.getLocalY(id), bodyId, bd.rigidbody, bd.fixedRotation, bd.isStatic)\n            this.#objects.set(id, object)\n          }\n        }\n\n        if (object) {\n          if (!object.world) {\n            object.world = this.#worlds.get(tree.getParent(id))\n          }\n\n          if (!object.isStatic) {\n            object.velocityX = tree.getVelocityX(id)\n            object.velocityY = tree.getVelocityY(id)\n\n            tree.setTargetX(id, object.x)\n            tree.setTargetY(id, object.y)\n          }\n\n          object.processedStep = step\n\n          const bodyId = tree.getBodyId(id)\n          if (object.bodyId !== bodyId) {\n            if (bodyId === NONE) {\n              object.remove()\n              this.#objects.delete(id)\n            } else {\n              const bd = this.#bodyDescriptors[bodyId]\n              if (bd) object.changeBody(bodyId, bd.rigidbody)\n            }\n          }\n        }\n      }\n    })\n\n    for (const [id, world] of this.#worlds) {\n      if (world.processedStep !== step) {\n        world.remove()\n        this.#worlds.delete(id)\n      }\n    }\n\n    for (const [id, object] of this.#objects) {\n      if (object.processedStep !== step) {\n        object.remove()\n        this.#objects.delete(id)\n      }\n    }\n  }\n}\n"]}