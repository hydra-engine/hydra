{"version":3,"file":"physics-object.js","sourceRoot":"","sources":["../../src/physics-node/physics-object.ts"],"names":[],"mappings":"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","sourcesContent":["import { Rigidbody, RigidbodyType } from '@hydraengine/shared'\nimport Matter, { IChamferableBodyDefinition } from 'matter-js'\nimport { PhysicsNode } from './physics-node'\nimport { PhysicsWorld } from './physics-world'\n\nexport class PhysicsObject extends PhysicsNode {\n  #matterBody!: Matter.Body\n  #world?: PhysicsWorld\n\n  initialX: number\n  initialY: number\n  bodyId: number\n  #fixedRotation: boolean\n  isStatic: boolean\n\n  constructor(\n    initialX: number,\n    initialY: number,\n    bodyId: number,\n    rigidbody: Rigidbody,\n    fixedRotation: boolean | undefined,\n    isStatic: boolean | undefined,\n  ) {\n    super()\n    this.initialX = initialX\n    this.initialY = initialY\n    this.bodyId = bodyId\n    this.#fixedRotation = fixedRotation ?? false\n    this.isStatic = isStatic ?? false\n    this.changeRigidbody(rigidbody)\n  }\n\n  set world(world) {\n    if (this.#world !== world) {\n      this.#world?.removeBody(this.#matterBody)\n      this.#world = world\n      world?.addBody(this.#matterBody)\n    }\n  }\n  get world() { return this.#world }\n\n  get x() { return this.#matterBody.position.x }\n  get y() { return this.#matterBody.position.y }\n\n  set velocityX(v) { Matter.Body.setVelocity(this.#matterBody, { x: v, y: this.#matterBody.velocity.y }) }\n  get velocityX() { return this.#matterBody.velocity.x }\n\n  set velocityY(v) { Matter.Body.setVelocity(this.#matterBody, { x: this.#matterBody.velocity.x, y: v }) }\n  get velocityY() { return this.#matterBody.velocity.y }\n\n  changeRigidbody(rigidbody: Rigidbody) {\n    let x = this.initialX\n    let y = this.initialY\n\n    if (this.#matterBody) {\n      x = this.#matterBody.position.x\n      y = this.#matterBody.position.y\n      this.#world?.removeBody(this.#matterBody)\n    }\n\n    const bodyOptions: IChamferableBodyDefinition = {\n      isStatic: this.isStatic ?? false\n    }\n\n    if (this.#fixedRotation) {\n      bodyOptions.inertia = Infinity\n      bodyOptions.angularVelocity = 0\n    }\n\n    if (rigidbody.type === RigidbodyType.Rectangle) {\n      this.#matterBody = Matter.Bodies.rectangle(x, y, rigidbody.width, rigidbody.height, bodyOptions)\n    } else if (rigidbody.type === RigidbodyType.Circle) {\n      this.#matterBody = Matter.Bodies.circle(x, y, rigidbody.radius, bodyOptions)\n    } else if (rigidbody.type === RigidbodyType.Polygon) {\n      this.#matterBody = Matter.Bodies.fromVertices(x, y, [rigidbody.vertices], bodyOptions)\n    } else {\n      throw new Error('Invalid rigidbody type')\n    }\n\n    this.#world?.addBody(this.#matterBody)\n  }\n\n  remove() {\n    this.#world?.removeBody(this.#matterBody)\n  }\n}\n"]}