{"version":3,"file":"physics-object.js","sourceRoot":"","sources":["../../src/physics-node/physics-object.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAA;AAG5C,MAAM,OAAO,aAAc,SAAQ,WAAW;IAC5C,0BAA0B;IAE1B,MAAM,CAAe;IAErB,YACE,KAAa,EACb,MAAc,EACd,aAAkC,EAClC,QAA6B;QAE7B,KAAK,EAAE,CAAA;QAEP,MAAM,WAAW,GAA+B;YAC9C,QAAQ,EAAE,QAAQ,IAAI,KAAK;SAC5B,CAAA;QAED,IAAI,aAAa,EAAE,CAAC;YAClB,WAAW,CAAC,OAAO,GAAG,QAAQ,CAAA;YAC9B,WAAW,CAAC,eAAe,GAAG,CAAC,CAAA;QACjC,CAAC;QAED;;;;;;;;WAQG;IACL,CAAC;IAED,IAAI,KAAK,CAAC,KAAK;QACb,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;QAEnB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;IACpB,CAAC;IAED,IAAI,KAAK,KAAK,OAAO,IAAI,CAAC,MAAM,CAAA,CAAC,CAAC;CACnC","sourcesContent":["import Matter, { IChamferableBodyDefinition } from 'matter-js'\nimport { PhysicsNode } from './physics-node'\nimport { PhysicsWorld } from './physics-world'\n\nexport class PhysicsObject extends PhysicsNode {\n  //#matterBody: Matter.Body\n\n  #world?: PhysicsWorld\n\n  constructor(\n    width: number,\n    height: number,\n    fixedRotation: boolean | undefined,\n    isStatic: boolean | undefined,\n  ) {\n    super()\n\n    const bodyOptions: IChamferableBodyDefinition = {\n      isStatic: isStatic ?? false\n    }\n\n    if (fixedRotation) {\n      bodyOptions.inertia = Infinity\n      bodyOptions.angularVelocity = 0\n    }\n\n    /*if (r.type === RigidbodyType.Rectangle) {\n      this.#matterBody = Matter.Bodies.rectangle(x, y, r.width, r.height, bodyOptions)\n    } else if (r.type === RigidbodyType.Circle) {\n      this.#matterBody = Matter.Bodies.circle(x, y, r.radius, bodyOptions)\n    } else if (r.type === RigidbodyType.Polygon) {\n      this.#matterBody = Matter.Bodies.fromVertices(x, y, [r.vertices], bodyOptions)\n    } else {\n      throw new Error('Invalid rigidbody type')\n    }*/\n  }\n\n  set world(world) {\n    this.#world = world\n\n    console.log(world)\n  }\n\n  get world() { return this.#world }\n}\n"]}