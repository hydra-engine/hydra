{"version":3,"file":"update-transforms.js","sourceRoot":"","sources":["../src/update-transforms.ts"],"names":[],"mappings":"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","sourcesContent":["import { NONE, ObjectStateTree } from '@hydraengine/shared'\n\nconst APPROACH = 10      // 목표로 붙는 속도(값이 클수록 빠르게 수렴)\nconst EPS = 1e-3         // 목표 스냅 임계값\n\nexport function updateTransforms(tree: ObjectStateTree, dt: number) {\n  tree.forEach((id) => {\n    const parent = tree.getParent(id)\n    if (parent === NONE) return\n\n    const tx = tree.getTargetX(id)\n    const ty = tree.getTargetY(id)\n\n    if (!isNaN(tx) || !isNaN(ty)) {\n\n      // 프레임 독립 지수 보간: k = 1 - e^(-a*dt)\n      const k = 1 - Math.exp(-APPROACH * dt)\n\n      if (!isNaN(tx)) {\n        const lx = tree.getLocalX(id)\n        const nx = lx + (tx - lx) * k\n        tree.setLocalX(id, nx)\n\n        // 목표에 충분히 가까우면 스냅\n        const closeX = Math.abs(tx - nx) <= EPS\n        if (closeX) tree.setLocalX(id, tx)\n      }\n\n      if (!isNaN(ty)) {\n        const ly = tree.getLocalY(id)\n        const ny = ly + (ty - ly) * k\n        tree.setLocalY(id, ny)\n\n        // 목표에 충분히 가까우면 스냅\n        const closeY = Math.abs(ty - ny) <= EPS\n        if (closeY) tree.setLocalY(id, ty)\n      }\n    }\n\n    // 부모 월드 값\n    const pCos = tree.getWorldCos(parent)\n    const pSin = tree.getWorldSin(parent)\n    const pX = tree.getWorldX(parent)\n    const pY = tree.getWorldY(parent)\n\n    // 위치(지역) -> 부모 스케일 적용 후 부모 회전\n    const rx = tree.getLocalX(id) * tree.getWorldScaleX(parent)\n    const ry = tree.getLocalY(id) * tree.getWorldScaleY(parent)\n\n    // 스케일(월드)\n    const scaleX = tree.getWorldScaleX(parent) * tree.getLocalScaleX(id)\n    const scaleY = tree.getWorldScaleY(parent) * tree.getLocalScaleY(id)\n    tree.setWorldScaleX(id, scaleX)\n    tree.setWorldScaleY(id, scaleY)\n\n    // 회전(월드) = 부모 + 로컬\n    const lCos = tree.getLocalCos(id)\n    const lSin = tree.getLocalSin(id)\n    // 덧셈정리로 합성 회전의 cos/sin\n    const wCos = pCos * lCos - pSin * lSin\n    const wSin = pSin * lCos + pCos * lSin\n\n    const rotation = tree.getWorldRotation(parent) + tree.getLocalRotation(id)\n    tree.setWorldRotation(id, rotation)\n    tree.setWorldCos(id, wCos)\n    tree.setWorldSin(id, wSin)\n\n    // 피벗: 월드 스케일로 스케일링 후 **월드 회전(wCos/wSin)** 으로 회전하여 빼기\n    const pivotX = tree.getLocalPivotX(id) * scaleX\n    const pivotY = tree.getLocalPivotY(id) * scaleY\n\n    const worldX = pX + (rx * pCos - ry * pSin) - (pivotX * wCos - pivotY * wSin)\n    const worldY = pY + (rx * pSin + ry * pCos) - (pivotX * wSin + pivotY * wCos)\n    tree.setWorldX(id, worldX)\n    tree.setWorldY(id, worldY)\n\n    tree.setWorldAlpha(id, tree.getWorldAlpha(parent) * tree.getLocalAlpha(id))\n  })\n}\n"]}