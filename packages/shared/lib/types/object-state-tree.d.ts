import { SabTree } from './sab-tree/sab-tree';
export declare class ObjectStateTree extends SabTree {
    constructor(sab: SharedArrayBuffer);
    static bytesRequired(): number;
    setObjectType(id: number, v: number): void;
    getObjectType(id: number): number;
    setLocalX(id: number, v: number): void;
    getLocalX(id: number): number;
    setLocalY(id: number, v: number): void;
    getLocalY(id: number): number;
    setLocalScaleX(id: number, v: number): void;
    getLocalScaleX(id: number): number;
    setLocalScaleY(id: number, v: number): void;
    getLocalScaleY(id: number): number;
    setLocalPivotX(id: number, v: number): void;
    getLocalPivotX(id: number): number;
    setLocalPivotY(id: number, v: number): void;
    getLocalPivotY(id: number): number;
    setLocalRotation(id: number, v: number): void;
    getLocalRotation(id: number): number;
    setLocalCos(id: number, v: number): void;
    getLocalCos(id: number): number;
    setLocalSin(id: number, v: number): void;
    getLocalSin(id: number): number;
    setLocalAlpha(id: number, v: number): void;
    getLocalAlpha(id: number): number;
    setWorldX(id: number, v: number): void;
    getWorldX(id: number): number;
    setWorldY(id: number, v: number): void;
    getWorldY(id: number): number;
    setWorldScaleX(id: number, v: number): void;
    getWorldScaleX(id: number): number;
    setWorldScaleY(id: number, v: number): void;
    getWorldScaleY(id: number): number;
    setWorldRotation(id: number, v: number): void;
    getWorldRotation(id: number): number;
    setWorldCos(id: number, v: number): void;
    getWorldCos(id: number): number;
    setWorldSin(id: number, v: number): void;
    getWorldSin(id: number): number;
    setWorldAlpha(id: number, v: number): void;
    getWorldAlpha(id: number): number;
    setAssetId(id: number, v: number): void;
    getAssetId(id: number): number;
    setAnimationId(id: number, v: number): void;
    getAnimationId(id: number): number;
}
//# sourceMappingURL=object-state-tree.d.ts.map