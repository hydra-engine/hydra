{"version":3,"file":"sab-tree.js","sourceRoot":"","sources":["../../src/sab-tree/sab-tree.ts"],"names":[],"mappings":"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","sourcesContent":["import { SabBooleanPool } from '../sab-data-structure/sab-boolean-pool'\nimport { SabFloat32Pool } from '../sab-data-structure/sab-float32-pool'\nimport { SabUint32Pool } from '../sab-data-structure/sab-uint32-pool'\nimport { SabTreeLinks } from './sab-tree-links'\nimport { SabTreeNodeIdPool } from './sab-tree-node-id-pool'\n\nexport class SabTree {\n  readonly #nodeIdPool: SabTreeNodeIdPool\n  readonly #links: SabTreeLinks\n  readonly #booleanPool: SabBooleanPool\n  readonly #uint32Pool: SabUint32Pool\n  readonly #float32Pool: SabFloat32Pool\n\n  constructor(\n    sab: SharedArrayBuffer,\n    bCount: number,\n    uCount: number,\n    fCount: number,\n    cap: number,\n  ) {\n    this.#nodeIdPool = new SabTreeNodeIdPool(sab, 0, cap)\n    let byteOffset = this.#nodeIdPool.byteLength\n\n    this.#links = new SabTreeLinks(sab, byteOffset, cap)\n    byteOffset += this.#links.byteLength\n\n    this.#booleanPool = new SabBooleanPool(sab, byteOffset, bCount, cap)\n    byteOffset += this.#booleanPool.byteLength\n\n    this.#uint32Pool = new SabUint32Pool(sab, byteOffset, uCount, cap)\n    byteOffset += this.#uint32Pool.byteLength\n\n    this.#float32Pool = new SabFloat32Pool(sab, byteOffset, fCount, cap)\n  }\n\n  static bytesRequired(\n    bCount: number,\n    uCount: number,\n    fCount: number,\n    cap: number,\n  ) {\n    const queueBytes = SabTreeNodeIdPool.bytesRequired(cap)\n    const linksBytes = SabTreeLinks.bytesRequired(cap)\n    const bvalueBytes = SabBooleanPool.bytesRequired(bCount, cap)\n    const uvalueBytes = SabUint32Pool.bytesRequired(uCount, cap)\n    const fvalueBytes = SabFloat32Pool.bytesRequired(fCount, cap)\n    return queueBytes + linksBytes + bvalueBytes + uvalueBytes + fvalueBytes\n  }\n\n  newChild(p: number) {\n    const id = this.#nodeIdPool.alloc()\n    this.#links.insert(p, id)\n    return id\n  }\n\n  getParent(id: number) { return this.#links.parent(id) }\n\n  insertAt(p: number, c: number, idx: number) {\n    this.#links.insertAt(p, c, idx)\n  }\n\n  remove(id: number) {\n    this.#links.remove(id)\n    this.#nodeIdPool.free(id)\n  }\n\n  setBoolean(id: number, vi: number, v: boolean) { this.#booleanPool.set(id, vi, v) }\n  getBoolean(id: number, vi: number) { return this.#booleanPool.get(id, vi) }\n\n  setUint32(id: number, vi: number, v: number) { this.#uint32Pool.set(id, vi, v) }\n  getUint32(id: number, vi: number) { return this.#uint32Pool.get(id, vi) }\n\n  setFloat32(id: number, vi: number, v: number) { this.#float32Pool.set(id, vi, v) }\n  getFloat32(id: number, vi: number) { return this.#float32Pool.get(id, vi) }\n\n  forEach(visitor: (id: number) => void) {\n    this.#links.forEach(visitor)\n  }\n\n  sortChildren(parent: number, uint32ValueIdx: number) {\n    this.#links.sortChildren(parent, (id) => this.#uint32Pool.get(id, uint32ValueIdx))\n  }\n}\n"]}