{"version":3,"file":"sab-tree-links.js","sourceRoot":"","sources":["../../src/sab-tree/sab-tree-links.ts"],"names":[],"mappings":"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","sourcesContent":["import { NONE, ROOT } from '../constants'\n\nexport const TREE_LINK_V_COUNT = 5 as const\n\nconst PARENT_IDX = 0 as const\nconst FIRST_IDX = 1 as const\nconst LAST_IDX = 2 as const\nconst PREV_IDX = 3 as const\nconst NEXT_IDX = 4 as const\n\nexport class SabTreeLinks {\n  readonly #meta: Uint32Array\n\n  constructor(sab: SharedArrayBuffer, byteOffset: number, cap: number) {\n    this.#meta = new Uint32Array(sab, byteOffset, cap * TREE_LINK_V_COUNT)\n  }\n\n  static bytesRequired(cap: number) { return cap * TREE_LINK_V_COUNT * Uint32Array.BYTES_PER_ELEMENT }\n  get byteLength() { return this.#meta.byteLength }\n\n  #o(id: number) { return id * TREE_LINK_V_COUNT }\n  parent(id: number) { return this.#meta[this.#o(id) + PARENT_IDX] }\n  #first(id: number) { return this.#meta[this.#o(id) + FIRST_IDX] }\n  #last(id: number) { return this.#meta[this.#o(id) + LAST_IDX] }\n  #next(id: number) { return this.#meta[this.#o(id) + NEXT_IDX] }\n\n  remove(id: number) {\n    const o = this.#o(id)\n    const p = this.#meta[o + PARENT_IDX]\n    const l = this.#meta[o + PREV_IDX]\n    const r = this.#meta[o + NEXT_IDX]\n\n    if (p !== NONE) {\n      const po = this.#o(p)\n      if (this.#meta[po + FIRST_IDX] === id) this.#meta[po + FIRST_IDX] = r\n      if (this.#meta[po + LAST_IDX] === id) this.#meta[po + LAST_IDX] = l\n    }\n    if (l !== NONE) this.#meta[this.#o(l) + NEXT_IDX] = r\n    if (r !== NONE) this.#meta[this.#o(r) + PREV_IDX] = l\n  }\n\n  #linkAsOnlyChild(p: number, c: number) {\n    const po = this.#o(p), co = this.#o(c)\n    this.#meta[co + PARENT_IDX] = p\n    this.#meta[co + PREV_IDX] = NONE\n    this.#meta[co + NEXT_IDX] = NONE\n    this.#meta[po + FIRST_IDX] = c\n    this.#meta[po + LAST_IDX] = c\n  }\n\n  #insertAfterSibling(p: number, left: number, c: number) {\n    const lo = this.#o(left)\n    const right = this.#meta[lo + NEXT_IDX]\n    const co = this.#o(c)\n\n    this.#meta[co + PARENT_IDX] = p\n    this.#meta[co + PREV_IDX] = left\n    this.#meta[co + NEXT_IDX] = right\n\n    this.#meta[lo + NEXT_IDX] = c\n    if (right !== NONE) this.#meta[this.#o(right) + PREV_IDX] = c\n    else this.#meta[this.#o(p) + LAST_IDX] = c\n  }\n\n  #insertBeforeSibling(p: number, right: number, c: number) {\n    const ro = this.#o(right)\n    const left = this.#meta[ro + PREV_IDX]\n    const co = this.#o(c)\n\n    this.#meta[co + PARENT_IDX] = p\n    this.#meta[co + NEXT_IDX] = right\n    this.#meta[co + PREV_IDX] = left\n\n    this.#meta[ro + PREV_IDX] = c\n    if (left !== NONE) this.#meta[this.#o(left) + NEXT_IDX] = c\n    else this.#meta[this.#o(p) + FIRST_IDX] = c\n  }\n\n  insert(p: number, c: number) {\n    this.remove(c)\n    const last = this.#last(p)\n    if (last === NONE) this.#linkAsOnlyChild(p, c)\n    else this.#insertAfterSibling(p, last, c)\n  }\n\n  insertAt(p: number, c: number, idx: number) {\n    this.remove(c)\n\n    const f = this.#first(p)\n    if (f === NONE) { this.#linkAsOnlyChild(p, c); return }\n    if (idx <= 0) { this.#insertBeforeSibling(p, f, c); return }\n\n    let i = 0, cur = f\n    while (cur !== NONE && i < idx) { cur = this.#next(cur); i++ }\n\n    if (cur === NONE) this.insert(p, c)\n    else this.#insertBeforeSibling(p, cur, c)\n  }\n\n  forEach(visitor: (id: number) => void): void {\n    let u: number = ROOT\n    while (true) {\n      visitor(u)\n\n      const f = this.#first(u)\n      if (f !== NONE) { u = f; continue }\n\n      while (true) {\n        if (u === ROOT) return\n        const n = this.#next(u)\n        if (n !== NONE) { u = n; break }\n        u = this.parent(u)\n      }\n    }\n  }\n\n  sortChildren(p: number, getCompValue: (id: number) => number) {\n    let head = this.#first(p)\n    if (head === NONE || this.#next(head) === NONE) {\n      return // 0 또는 1개의 요소는 정렬할 필요가 없습니다.\n    }\n\n    // 연결 리스트를 배열로 변환합니다.\n    const children = []\n    let current = head\n    while (current !== NONE) {\n      children.push(current)\n      current = this.#next(current)\n    }\n\n    // 병합 정렬을 사용하여 배열을 정렬합니다.\n    children.sort((a, b) => getCompValue(a) - getCompValue(b))\n\n    // 정렬된 배열을 기반으로 연결 리스트를 다시 연결합니다.\n    const po = this.#o(p)\n    this.#meta[po + FIRST_IDX] = children[0]\n    this.#meta[po + LAST_IDX] = children[children.length - 1]\n\n    for (let i = 0; i < children.length; i++) {\n      const childId = children[i]\n      const co = this.#o(childId)\n      const prevId = i > 0 ? children[i - 1] : NONE\n      const nextId = i < children.length - 1 ? children[i + 1] : NONE\n\n      this.#meta[co + PARENT_IDX] = p\n      this.#meta[co + PREV_IDX] = prevId\n      this.#meta[co + NEXT_IDX] = nextId\n    }\n  }\n}\n"]}