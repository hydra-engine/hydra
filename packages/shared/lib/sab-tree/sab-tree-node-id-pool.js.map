{"version":3,"file":"sab-tree-node-id-pool.js","sourceRoot":"","sources":["../../src/sab-tree/sab-tree-node-id-pool.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,wCAAwC,CAAA;AAEvE,2BAA2B;AAC3B,MAAM,OAAO,iBAAiB;IACnB,EAAE,CAAgB;IAE3B,YAAY,GAAsB,EAAE,UAAkB,EAAE,GAAW;QACjE,IAAI,CAAC,EAAE,GAAG,IAAI,cAAc,CAAC,GAAG,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;IACxD,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,GAAW,IAAI,OAAO,cAAc,CAAC,aAAa,CAAC,GAAG,GAAG,CAAC,CAAC,CAAA,CAAC,CAAC;IAClF,IAAI,UAAU,KAAK,OAAO,IAAI,CAAC,EAAE,CAAC,UAAU,CAAA,CAAC,CAAC;IAE9C,KAAK,KAAK,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAA,CAAC,CAAC;IACpC,IAAI,CAAC,EAAU,IAAI,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA,CAAC,CAAC;CACzC","sourcesContent":["import { SabUint32Queue } from '../sab-data-structure/sab-uint32-queue'\n\n// 0번 ID(root)는 항상 존재하므로 제외\nexport class SabTreeNodeIdPool {\n  readonly #q: SabUint32Queue\n\n  constructor(sab: SharedArrayBuffer, byteOffset: number, cap: number) {\n    this.#q = new SabUint32Queue(sab, byteOffset, cap - 1)\n  }\n\n  static bytesRequired(cap: number) { return SabUint32Queue.bytesRequired(cap - 1) }\n  get byteLength() { return this.#q.byteLength }\n\n  alloc() { return this.#q.dequeue() }\n  free(id: number) { this.#q.enqueue(id) }\n}\n"]}