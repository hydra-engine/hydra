{"version":3,"file":"sab-boolean-pool.js","sourceRoot":"","sources":["../../src/sab-data-structure/sab-boolean-pool.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,cAAc;IAChB,MAAM,CAAa;IACnB,OAAO,CAAQ;IAExB,YACE,GAAsB,EACtB,UAAkB,EAClB,MAAc,EACd,GAAW;QAEX,IAAI,CAAC,OAAO,GAAG,MAAM,CAAA;QAErB,MAAM,SAAS,GAAG,MAAM,GAAG,GAAG,CAAA;QAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,CAAA;QAC3C,IAAI,CAAC,MAAM,GAAG,IAAI,WAAW,CAAC,GAAG,EAAE,UAAU,EAAE,SAAS,CAAC,CAAA;IAC3D,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,MAAc,EAAE,GAAW;QAC9C,MAAM,SAAS,GAAG,MAAM,GAAG,GAAG,CAAA;QAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,CAAA;QAC3C,OAAO,SAAS,GAAG,WAAW,CAAC,iBAAiB,CAAA;IAClD,CAAC;IAED,IAAI,UAAU,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAA,CAAC,CAAC;IAElD,GAAG,CAAC,EAAU,EAAE,EAAU;QACxB,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,GAAG,EAAE,CAAA;IAC/B,CAAC;IAED,GAAG,CAAC,EAAU,EAAE,EAAU,EAAE,CAAU;QACpC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;QAC3B,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAA;QACnB,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;QAE3B,IAAI,CAAC;YAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,IAAI,CAAA;;YACzB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAA;IAC/B,CAAC;IAED,GAAG,CAAC,EAAU,EAAE,EAAU;QACxB,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;QAC3B,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAA;QACnB,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;QAE3B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAA;IACvC,CAAC;CACF","sourcesContent":["export class SabBooleanPool {\n  readonly #words: Uint32Array\n  readonly #vCount: number\n\n  constructor(\n    sab: SharedArrayBuffer,\n    byteOffset: number,\n    vCount: number,\n    cap: number,\n  ) {\n    this.#vCount = vCount\n\n    const totalBits = vCount * cap\n    const wordCount = Math.ceil(totalBits / 32)\n    this.#words = new Uint32Array(sab, byteOffset, wordCount)\n  }\n\n  static bytesRequired(vCount: number, cap: number) {\n    const totalBits = vCount * cap\n    const wordCount = Math.ceil(totalBits / 32)\n    return wordCount * Uint32Array.BYTES_PER_ELEMENT\n  }\n\n  get byteLength() { return this.#words.byteLength }\n\n  #bi(id: number, vi: number) {\n    return id * this.#vCount + vi\n  }\n\n  set(id: number, vi: number, v: boolean) {\n    const bi = this.#bi(id, vi)\n    const wi = bi >>> 5\n    const mask = 1 << (bi & 31)\n\n    if (v) this.#words[wi] |= mask\n    else this.#words[wi] &= ~mask\n  }\n\n  get(id: number, vi: number) {\n    const bi = this.#bi(id, vi)\n    const wi = bi >>> 5\n    const mask = 1 << (bi & 31)\n\n    return (this.#words[wi] & mask) !== 0\n  }\n}\n"]}