{"version":3,"file":"object-state-buffer.js","sourceRoot":"","sources":["../src/object-state-buffer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,aAAa,EAAE,IAAI,EAAE,eAAe,EAAE,cAAc,EAAE,YAAY,EAAE,iBAAiB,EAAE,aAAa,EAAE,cAAc,EAAE,iBAAiB,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAA;AAEpN,MAAM,UAAU,uBAAuB;IACrC,MAAM,GAAG,GAAG,IAAI,iBAAiB,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC,CAAA;IAElE,MAAM,CAAC,GAAG,IAAI,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAA;IAClD,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,QAAQ,EAAE,EAAE,EAAE;QAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;IAEnD,IAAI,UAAU,GAAG,iBAAiB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;IAC1D,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,GAAG,EAAE,UAAU,EAAE,iBAAiB,GAAG,QAAQ,CAAC,CAAA;IAC5E,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAEhB,UAAU,IAAI,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;IAClD,UAAU,IAAI,cAAc,CAAC,aAAa,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAA;IAEnE,MAAM,UAAU,GAAG,IAAI,WAAW,CAAC,GAAG,EAAE,UAAU,EAAE,YAAY,GAAG,QAAQ,CAAC,CAAA;IAC5E,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAErB,UAAU,IAAI,aAAa,CAAC,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAA;IAEjE,MAAM,WAAW,GAAG,IAAI,YAAY,CAAC,GAAG,EAAE,UAAU,EAAE,aAAa,GAAG,QAAQ,CAAC,CAAA;IAC/E,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAErB,OAAO,GAAG,CAAA;AACZ,CAAC","sourcesContent":["import { BOOLEAN_COUNT, CAPACITY, FLOAT32_COUNT, NONE, ObjectStateTree, SabBooleanPool, SabTreeLinks, SabTreeNodeIdPool, SabUint32Pool, SabUint32Queue, TREE_LINK_V_COUNT, UINT32_COUNT } from '@hydraengine/shared'\n\nexport function createObjectStateBuffer() {\n  const sab = new SharedArrayBuffer(ObjectStateTree.bytesRequired())\n\n  const q = new SabUint32Queue(sab, 0, CAPACITY - 1)\n  for (let id = 1; id < CAPACITY; id++) q.enqueue(id)\n\n  let byteOffset = SabTreeNodeIdPool.bytesRequired(CAPACITY)\n  const links = new Uint32Array(sab, byteOffset, TREE_LINK_V_COUNT * CAPACITY)\n  links.fill(NONE)\n\n  byteOffset += SabTreeLinks.bytesRequired(CAPACITY)\n  byteOffset += SabBooleanPool.bytesRequired(BOOLEAN_COUNT, CAPACITY)\n\n  const uint32Pool = new Uint32Array(sab, byteOffset, UINT32_COUNT * CAPACITY)\n  uint32Pool.fill(NONE)\n\n  byteOffset += SabUint32Pool.bytesRequired(UINT32_COUNT, CAPACITY)\n\n  const float32Pool = new Float32Array(sab, byteOffset, FLOAT32_COUNT * CAPACITY)\n  float32Pool.fill(NaN)\n\n  return sab\n}\n"]}