{"version":3,"file":"object-state-buffer.js","sourceRoot":"","sources":["../src/object-state-buffer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,eAAe,EAAE,cAAc,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAA;AAExG,MAAM,UAAU,uBAAuB;IACrC,MAAM,GAAG,GAAG,IAAI,iBAAiB,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC,CAAA;IAElE,MAAM,CAAC,GAAG,IAAI,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAA;IAClD,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,QAAQ,EAAE,EAAE,EAAE;QAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;IAEnD,MAAM,UAAU,GAAG,cAAc,CAAC,aAAa,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAA;IAC7D,MAAM,IAAI,GAAG,IAAI,WAAW,CAAC,GAAG,EAAE,UAAU,EAAE,QAAQ,GAAG,iBAAiB,CAAC,CAAA;IAC3E,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAEf,OAAO,GAAG,CAAA;AACZ,CAAC","sourcesContent":["import { CAPACITY, NONE, ObjectStateTree, SabUint32Queue, TREE_LINK_V_COUNT } from '@hydraengine/shared'\n\nexport function createObjectStateBuffer() {\n  const sab = new SharedArrayBuffer(ObjectStateTree.bytesRequired())\n\n  const q = new SabUint32Queue(sab, 0, CAPACITY - 1)\n  for (let id = 1; id < CAPACITY; id++) q.enqueue(id)\n\n  const byteOffset = SabUint32Queue.bytesRequired(CAPACITY - 1)\n  const meta = new Uint32Array(sab, byteOffset, CAPACITY * TREE_LINK_V_COUNT)\n  meta.fill(NONE)\n\n  return sab\n}\n"]}