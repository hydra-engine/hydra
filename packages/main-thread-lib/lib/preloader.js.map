{"version":3,"file":"preloader.js","sourceRoot":"","sources":["../src/preloader.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,SAAS;IACpB,SAAS,CAAU;IACnB,iBAAiB,CAA6B;IAC9C,YAAY,GAAG,CAAC,CAAA;IAChB,UAAU,GAAG,IAAI,GAAG,EAAU,CAAA;IAC9B,eAAe,CAAa;IAC5B,eAAe,CAAe;IAE9B,YAAY,QAAkB,EAAE,gBAA6C;QAC3E,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;QACzB,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAA;QAEzC,8BAA8B;QAC9B,IAAI,CAAC,eAAe,GAAG,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;YACnD,IAAI,CAAC,eAAe,GAAG,OAAO,CAAA;QAChC,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,KAAK,CAAC,OAAO;QACX,0CAA0C;QAC1C,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;YAC/C,OAAM;QACR,CAAC;QACD,OAAO,IAAI,CAAC,eAAe,CAAA;IAC7B,CAAC;IAED,UAAU,CAAC,EAAU;QACnB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC;YAAE,OAAM,CAAC,YAAY;QACrD,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;YAAE,OAAM,CAAC,WAAW;QAE/C,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;QACvB,IAAI,CAAC,YAAY,EAAE,CAAA;QAEnB,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAA;QAC1D,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC3B,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAA;QAClC,CAAC;QAED,4BAA4B;QAC5B,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;YAChD,IAAI,CAAC,eAAe,EAAE,EAAE,CAAA;QAC1B,CAAC;IACH,CAAC;CACF","sourcesContent":["export class Preloader {\n  #assetIds: number[]\n  #progressCallback?: (progress: number) => void\n  #loadedCount = 0\n  #loadedSet = new Set<number>()\n  #resolvePreload?: () => void\n  #preloadPromise: Promise<void>\n\n  constructor(assetIds: number[], progressCallback?: (progress: number) => void) {\n    this.#assetIds = assetIds\n    this.#progressCallback = progressCallback\n\n    // preload에서 사용할 Promise 미리 생성\n    this.#preloadPromise = new Promise<void>((resolve) => {\n      this.#resolvePreload = resolve\n    })\n  }\n\n  async preload(): Promise<void> {\n    // 모든 asset이 이미 markLoaded 된 경우 즉시 resolve\n    if (this.#loadedCount >= this.#assetIds.length) {\n      return\n    }\n    return this.#preloadPromise\n  }\n\n  markLoaded(id: number) {\n    if (!this.#assetIds.includes(id)) return // 잘못된 id 무시\n    if (this.#loadedSet.has(id)) return // 중복 로딩 방지\n\n    this.#loadedSet.add(id)\n    this.#loadedCount++\n\n    const progress = this.#loadedCount / this.#assetIds.length\n    if (this.#progressCallback) {\n      this.#progressCallback(progress)\n    }\n\n    // 모두 로딩 끝나면 preload resolve\n    if (this.#loadedCount === this.#assetIds.length) {\n      this.#resolvePreload?.()\n    }\n  }\n}\n"]}