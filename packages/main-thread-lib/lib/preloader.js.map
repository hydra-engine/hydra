{"version":3,"file":"preloader.js","sourceRoot":"","sources":["../src/preloader.ts"],"names":[],"mappings":"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","sourcesContent":["import { AssetSource } from '@hydraengine/shared'\nimport { audioLoader } from './loaders/audio'\nimport { fontFamilyLoader } from './loaders/font'\nimport { Loader } from './loaders/loader'\n\nconst EXTERNAL_LOADER = Symbol('EXTERNAL_LOADER')\n\nconst loaderForPathMap: Array<{ check: (path: string) => boolean, loader: Loader<any> | typeof EXTERNAL_LOADER }> = [\n  { check: (p) => p.endsWith('.json') || p.endsWith('.atlas'), loader: EXTERNAL_LOADER },\n  { check: (p) => p.endsWith('.skel'), loader: EXTERNAL_LOADER },\n  { check: (p) => /\\.(png|jpe?g|gif|webp)$/.test(p), loader: EXTERNAL_LOADER },\n  { check: (p) => /\\.(mp3|wav|ogg)$/.test(p), loader: audioLoader },\n  { check: (p) => !p.includes('.'), loader: fontFamilyLoader }\n]\n\nfunction getLoaderForPath(path: string): Loader<any> | typeof EXTERNAL_LOADER | undefined {\n  return loaderForPathMap.find(({ check }) => check(path))?.loader\n}\n\nconst idToLoaderMap = new Map<number, Loader<any> | typeof EXTERNAL_LOADER>()\n\nasync function loadAsset(id: number, asset: AssetSource): Promise<boolean> {\n  if (typeof asset === 'string') {\n    const loader = getLoaderForPath(asset)\n    if (!loader) {\n      console.warn(`No loader found for asset: ${asset}`)\n      return true\n    }\n    idToLoaderMap.set(id, loader)\n    if (loader === EXTERNAL_LOADER) return false\n    await loader.load(id, asset)\n    return true\n  } else if ('atlas' in asset) {\n    idToLoaderMap.set(id, EXTERNAL_LOADER)\n    return false\n  } else if ('fnt' in asset) {\n    idToLoaderMap.set(id, EXTERNAL_LOADER)\n    return false\n  } else {\n    console.warn(`Unknown asset type: ${asset}`)\n    return true\n  }\n}\n\nfunction releaseAsset(id: number): void {\n  const loader = idToLoaderMap.get(id)\n  if (!loader) return\n  if (loader !== EXTERNAL_LOADER) {\n    loader.release(id)\n  }\n}\n\nexport class Preloader {\n  #assetIds: Set<number>\n  #progressCallback?: (progress: number) => void\n\n  #loadedAssets = new Set<number>()\n  #resolve?: () => void\n\n  constructor(\n    assetSources: Record<number, AssetSource>,\n    assetIds: number[],\n    progressCallback?: (progress: number) => void,\n  ) {\n    this.#assetIds = new Set(assetIds)\n    this.#progressCallback = progressCallback\n\n    for (const id of this.#assetIds) {\n      loadAsset(id, assetSources[id]).then((internal) => {\n        if (internal) this.markLoaded(id)\n      })\n    }\n  }\n\n  async preload(): Promise<void> {\n    if (this.#loadedAssets.size === this.#assetIds.size) return\n    return new Promise<void>((resolve) => this.#resolve = resolve)\n  }\n\n  markLoaded(id: number): void {\n    this.#loadedAssets.add(id)\n    const total = this.#assetIds.size\n    this.#progressCallback?.(this.#loadedAssets.size / total)\n    if (this.#loadedAssets.size === total) this.#resolve?.()\n  }\n}\n"]}