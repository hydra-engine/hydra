{"version":3,"file":"preloader.js","sourceRoot":"","sources":["../src/preloader.ts"],"names":[],"mappings":"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","sourcesContent":["import { AssetSource } from '@hydraengine/shared'\nimport { audioLoader } from './loaders/audio'\nimport { fontFamilyLoader } from './loaders/font'\nimport { Loader } from './loaders/loader'\n\nconst EXTERNAL_LOADER = Symbol('EXTERNAL_LOADER')\n\nconst loaderForPathMap: Array<{ check: (path: string) => boolean, loader: Loader<any> | typeof EXTERNAL_LOADER }> = [\n  { check: (p) => p.endsWith('.json') || p.endsWith('.atlas'), loader: EXTERNAL_LOADER },\n  { check: (p) => p.endsWith('.skel'), loader: EXTERNAL_LOADER },\n  { check: (p) => /\\.(png|jpe?g|gif|webp)$/i.test(p), loader: EXTERNAL_LOADER },\n  { check: (p) => /\\.(mp3|wav|ogg)$/i.test(p), loader: audioLoader },\n  { check: (p) => !p.includes('.'), loader: fontFamilyLoader },\n]\n\nfunction getLoaderForPath(path: string): Loader<any> | typeof EXTERNAL_LOADER | undefined {\n  return loaderForPathMap.find(({ check }) => check(path))?.loader\n}\n\nconst idToLoaderMap = new Map<number, Loader<any> | typeof EXTERNAL_LOADER>()\n\nasync function loadAsset(id: number, asset: AssetSource): Promise<void> {\n  if (typeof asset !== 'string') {\n    console.warn(`Unknown asset type: ${asset}`)\n    return\n  }\n  const loader = getLoaderForPath(asset)\n  if (!loader) {\n    console.warn(`No loader found for asset: ${asset}`)\n    return\n  }\n  idToLoaderMap.set(id, loader)\n  if (loader !== EXTERNAL_LOADER) {\n    await (loader as Loader<any>).load(id, asset)\n  }\n}\n\nfunction releaseAsset(id: number): void {\n  const loader = idToLoaderMap.get(id)\n  if (!loader) return\n  if (loader !== EXTERNAL_LOADER) {\n    ; (loader as Loader<any>).release(id)\n  }\n}\n\nexport class Preloader {\n  #assetSources: Record<number, AssetSource>\n  #assetIds: number[]\n\n  // 내부 로드 대상\n  #internalLoadIds: number[]\n\n  // 진행률/완료 판단용 전체 대기 집합(내부+외부)\n  #waitIds: number[]\n\n  #progressCallback?: (progress: number) => void\n  #loadedSet = new Set<number>()\n  #resolvePreload?: () => void\n  #preloadPromise: Promise<void>\n\n  constructor(\n    assetSources: Record<number, AssetSource>,\n    assetIds: number[],\n    progressCallback?: (progress: number) => void,\n  ) {\n    this.#assetSources = assetSources\n    this.#assetIds = assetIds\n    this.#progressCallback = progressCallback\n\n    // 전체 대기 집합: 로더가 식별되는 모든 항목\n    this.#waitIds = this.#assetIds.filter((id) => {\n      const src = this.#assetSources[id]\n      return typeof src === 'string' && !!getLoaderForPath(src)\n    })\n\n    // 내부 로드 집합: 내부 로더가 있는 항목만\n    this.#internalLoadIds = this.#waitIds.filter((id) => {\n      const src = this.#assetSources[id] as string\n      const loader = getLoaderForPath(src)\n      return loader && loader !== EXTERNAL_LOADER\n    })\n\n    this.#preloadPromise = new Promise<void>((resolve) => {\n      this.#resolvePreload = resolve\n    })\n  }\n\n  /** 자동 로드 수행(내부 로더 대상만). 외부 대상은 notifyLoaded(id)를 기다림. */\n  async preload(): Promise<void> {\n    // 기다릴 게 없으면 즉시 완료\n    if (this.#waitIds.length === 0 || this.#loadedSet.size >= this.#waitIds.length) {\n      this.#resolvePreload?.()\n      return this.#preloadPromise\n    }\n\n    await Promise.all(\n      this.#internalLoadIds.map(async (id) => {\n        const asset = this.#assetSources[id]\n        if (asset === undefined) {\n          console.warn(`[Preloader] Missing asset for id=${id}`)\n          this.notifyLoaded(id) // 누락도 완료로 처리해 카운트 일관성 유지\n          return\n        }\n        try {\n          await loadAsset(id, asset)\n        } catch (e) {\n          console.warn(`[Preloader] Failed to load asset (id=${id}):`, e)\n        } finally {\n          this.notifyLoaded(id)\n        }\n      })\n    )\n\n    return this.#preloadPromise\n  }\n\n  /**\n   * 외부/내부 공통 완료 신호 함수.\n   * 외부 로딩이 끝났을 때도 이 함수를 호출하세요.\n   */\n  notifyLoaded(id: number): void {\n    if (!this.#waitIds.includes(id)) return\n    if (this.#loadedSet.has(id)) return\n\n    this.#loadedSet.add(id)\n\n    const total = this.#waitIds.length\n    const progress = total === 0 ? 1 : this.#loadedSet.size / total\n    this.#progressCallback?.(progress)\n\n    if (this.#loadedSet.size === total) {\n      this.#resolvePreload?.()\n    }\n  }\n\n  /** 자동 로드했던 자원만 해제(외부 주입 리소스는 외부에서 관리) */\n  release(): void {\n    for (const id of this.#internalLoadIds) {\n      try {\n        releaseAsset(id)\n      } catch (e) {\n        console.warn(`[Preloader] Failed to release asset (id=${id}):`, e)\n      }\n    }\n  }\n}\n"]}