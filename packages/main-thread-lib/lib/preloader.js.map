{"version":3,"file":"preloader.js","sourceRoot":"","sources":["../src/preloader.ts"],"names":[],"mappings":"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","sourcesContent":["import { AssetSource } from '@hydraengine/shared'\nimport { audioLoader } from './loaders/audio'\nimport { fontFamilyLoader } from './loaders/font'\nimport { Loader } from './loaders/loader'\n\nconst EXTERNAL_LOADER = Symbol('EXTERNAL_LOADER')\n\nconst loaderForPathMap: Array<{ check: (path: string) => boolean, loader: Loader<any> | typeof EXTERNAL_LOADER }> = [\n  { check: (p) => p.endsWith('.json') || p.endsWith('.atlas'), loader: EXTERNAL_LOADER }, // 외부 주입\n  { check: (p) => p.endsWith('.skel'), loader: EXTERNAL_LOADER }, // 외부 주입\n  { check: (p) => /\\.(png|jpe?g|gif|webp)$/.test(p), loader: EXTERNAL_LOADER }, // 외부 주입\n  { check: (p) => /\\.(mp3|wav|ogg)$/.test(p), loader: audioLoader },\n  { check: (p) => !p.includes('.'), loader: fontFamilyLoader }\n]\n\nfunction getLoaderForPath(path: string): Loader<any> | typeof EXTERNAL_LOADER | undefined {\n  return loaderForPathMap.find(({ check }) => check(path))?.loader\n}\n\nconst idToLoaderMap = new Map<number, Loader<any> | typeof EXTERNAL_LOADER>()\n\nasync function loadAsset(id: number, asset: AssetSource): Promise<void> {\n  if (typeof asset === 'string') {\n    const loader = getLoaderForPath(asset)\n    if (!loader) {\n      console.warn(`No loader found for asset: ${asset}`)\n      return\n    }\n    idToLoaderMap.set(id, loader)\n    if (loader !== EXTERNAL_LOADER) {\n      await loader.load(id, asset)\n    }\n  } else {\n    console.warn(`Unknown asset type: ${asset}`)\n  }\n}\n\nfunction releaseAsset(id: number): void {\n  const loader = idToLoaderMap.get(id)\n  if (!loader) {\n    console.warn(`No loader found for asset ID: ${id}`)\n    return\n  }\n  if (loader !== EXTERNAL_LOADER) {\n    loader.release(id)\n  }\n}\n\nexport class Preloader {\n  #assetIds: number[]\n  #progressCallback?: (progress: number) => void\n  #loadedCount = 0\n  #loadedSet = new Set<number>()\n  #resolvePreload?: () => void\n  #preloadPromise: Promise<void>\n\n  constructor(\n    assetSources: Record<number, AssetSource>,\n    assetIds: number[],\n    progressCallback?: (progress: number) => void,\n  ) {\n    this.#assetIds = assetIds\n    this.#progressCallback = progressCallback\n\n    // preload에서 사용할 Promise 미리 생성\n    this.#preloadPromise = new Promise<void>((resolve) => {\n      this.#resolvePreload = resolve\n    })\n  }\n\n  async preload(): Promise<void> {\n    // 모든 asset이 이미 markLoaded 된 경우 즉시 resolve\n    if (this.#loadedCount >= this.#assetIds.length) {\n      return\n    }\n    return this.#preloadPromise\n  }\n\n  markLoaded(id: number) {\n    if (!this.#assetIds.includes(id)) return // 잘못된 id 무시\n    if (this.#loadedSet.has(id)) return // 중복 로딩 방지\n\n    this.#loadedSet.add(id)\n    this.#loadedCount++\n\n    const progress = this.#loadedCount / this.#assetIds.length\n    if (this.#progressCallback) {\n      this.#progressCallback(progress)\n    }\n\n    // 모두 로딩 끝나면 preload resolve\n    if (this.#loadedCount === this.#assetIds.length) {\n      this.#resolvePreload?.()\n    }\n  }\n}\n"]}