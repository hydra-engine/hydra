{"version":3,"file":"fps-display.js","sourceRoot":"","sources":["../src/fps-display.ts"],"names":[],"mappings":"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","sourcesContent":["const PR = window.devicePixelRatio\nconst WIDTH = 80 * PR\nconst HEIGHT = 48 * PR\nconst TEXT_X = 3 * PR\nconst TEXT_Y = 2 * PR\nconst GRAPH_X = 3 * PR\nconst GRAPH_Y = 15 * PR\nconst GRAPH_WIDTH = 74 * PR\nconst GRAPH_HEIGHT = 30 * PR\n\nconst round = Math.round\n\n// ---------- Color helpers ----------\nfunction hexToRgb(hex: string) {\n  const s = hex.replace('#', '')\n  const v = s.length === 3\n    ? s.split('').map(ch => ch + ch).join('')\n    : s\n  const num = parseInt(v, 16)\n  return {\n    r: (num >> 16) & 255,\n    g: (num >> 8) & 255,\n    b: num & 255\n  }\n}\n\nfunction rgbToHsl(r: number, g: number, b: number) {\n  r /= 255; g /= 255; b /= 255\n  const max = Math.max(r, g, b), min = Math.min(r, g, b)\n  let h = 0, s = 0\n  const l = (max + min) / 2\n\n  if (max !== min) {\n    const d = max - min\n    s = l > 0.5 ? d / (2 - max - min) : d / (max - min)\n    switch (max) {\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break\n      case g: h = (b - r) / d + 2; break\n      case b: h = (r - g) / d + 4; break\n    }\n    h *= 60\n  }\n  return { h, s, l }\n}\n\nfunction hslToHex(h: number, s: number, l: number) {\n  const c = (1 - Math.abs(2 * l - 1)) * s\n  const x = c * (1 - Math.abs(((h / 60) % 2) - 1))\n  const m = l - c / 2\n  let r = 0, g = 0, b = 0\n\n  if (0 <= h && h < 60) { r = c; g = x; b = 0 }\n  else if (60 <= h && h < 120) { r = x; g = c; b = 0 }\n  else if (120 <= h && h < 180) { r = 0; g = c; b = x }\n  else if (180 <= h && h < 240) { r = 0; g = x; b = c }\n  else if (240 <= h && h < 300) { r = x; g = 0; b = c }\n  else { r = c; g = 0; b = x }\n\n  const toHex = (v: number) => {\n    const n = Math.round((v + m) * 255)\n    return n.toString(16).padStart(2, '0')\n  }\n  return `#${toHex(r)}${toHex(g)}${toHex(b)}`\n}\n\nfunction shiftHexHue(hex: string, hueDelta: number, lightnessDelta = 0) {\n  const { r, g, b } = hexToRgb(hex)\n  const { h, s, l } = rgbToHsl(r, g, b)\n  const h2 = (h + hueDelta) % 360\n  const l2 = Math.max(0, Math.min(1, l + lightnessDelta))\n  return hslToHex(h2 < 0 ? h2 + 360 : h2, s, l2)\n}\n\n// ---------- FPS Display ----------\nexport class FpsDisplay {\n  static #instanceCount = 0\n\n  #canvas: HTMLCanvasElement\n  #context: CanvasRenderingContext2D\n\n  #title: string\n  #min = Infinity\n  #max = 0\n  #currentFps = 0\n\n  #intervalId: number\n\n  // per-instance palette\n  #fg: string\n  #bg: string\n\n  constructor(container: HTMLElement, title: string) {\n    this.#title = title\n\n    // palette: base colors + small shift per instance\n    const idx = FpsDisplay.#instanceCount++\n    const hueStep = 18 // degrees per instance (조금씩 변화)\n    this.#fg = shiftHexHue('#0ff', idx * hueStep, 0)      // 밝은 전경\n    this.#bg = shiftHexHue('#002', idx * hueStep, 0.02)   // 너무 어둡지 않게 살짝 밝게\n\n    const canvas = document.createElement('canvas')\n    container.appendChild(canvas)\n\n    canvas.width = WIDTH\n    canvas.height = HEIGHT\n    canvas.style.cssText = 'width:80px;height:48px'\n\n    const ctx = canvas.getContext('2d')\n    if (!ctx) throw new Error('2D context not available')\n\n    // text & baseline\n    ctx.font = `bold ${9 * PR}px Helvetica,Arial,sans-serif`\n    ctx.textBaseline = 'top'\n\n    // background\n    ctx.globalAlpha = 1\n    ctx.fillStyle = this.#bg\n    ctx.fillRect(0, 0, WIDTH, HEIGHT)\n\n    // title + graph frame\n    ctx.fillStyle = this.#fg\n    ctx.fillText(title, TEXT_X, TEXT_Y)\n    ctx.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT)\n\n    // graph area overlay\n    ctx.fillStyle = this.#bg\n    ctx.globalAlpha = 0.9\n    ctx.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT)\n\n    this.#canvas = canvas\n    this.#context = ctx\n\n    // start updating once per second\n    this.#intervalId = setInterval(() => this.#drawGraph(), 1000) as unknown as number\n  }\n\n  #drawGraph() {\n    const ctx = this.#context\n    if (this.#min === Infinity) return\n\n    // header area\n    ctx.globalAlpha = 1\n    ctx.fillStyle = this.#bg\n    ctx.fillRect(0, 0, WIDTH, GRAPH_Y)\n\n    ctx.fillStyle = this.#fg\n    const label = `${round(this.#currentFps)} ${this.#title} (${round(this.#min)}-${round(this.#max)})`\n    ctx.fillText(label, TEXT_X, TEXT_Y)\n\n    // scroll graph left by 1px (PR units)\n    ctx.drawImage(\n      this.#canvas,\n      GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT,\n      GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT\n    )\n\n    // rightmost new column background\n    ctx.fillStyle = this.#fg\n    ctx.globalAlpha = 1\n    ctx.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT)\n\n    // draw value column\n    ctx.fillStyle = this.#bg\n    ctx.globalAlpha = 0.9\n    const max = this.#max < 100 ? 100 : this.#max\n    const emptyHeight = round((1 - (this.#currentFps / max)) * GRAPH_HEIGHT)\n    ctx.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, emptyHeight)\n\n    // restore alpha for next pass\n    ctx.globalAlpha = 1\n  }\n\n  set fps(fps: number) {\n    this.#min = Math.min(this.#min, fps)\n    this.#max = Math.max(this.#max, fps)\n    this.#currentFps = fps\n  }\n\n  get fps() { return this.#currentFps }\n\n  remove() {\n    clearInterval(this.#intervalId)\n    this.#canvas.remove()\n  }\n}\n"]}