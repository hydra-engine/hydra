{"version":3,"file":"world-transform.js","sourceRoot":"","sources":["../../../src/logic-node/core/world-transform.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,cAAc;IACzB,GAAG,CAAS;IACZ,UAAU,CAAkB;IAE5B,IAAI,CAAC;QACH,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAA;QACnB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAA;QAC5B,IAAI,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;QAC3B,CAAC;QACD,OAAO,GAAG,CAAA;IACZ,CAAC;IAED,IAAI,CAAC;QACH,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAA;QACnB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAA;QAC5B,IAAI,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;QAC3B,CAAC;QACD,OAAO,GAAG,CAAA;IACZ,CAAC;IAED,IAAI,MAAM;QACR,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAA;QACnB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAA;QAC5B,IAAI,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAA;QAChC,CAAC;QACD,OAAO,CAAC,CAAA;IACV,CAAC;IAED,IAAI,MAAM;QACR,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAA;QACnB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAA;QAC5B,IAAI,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAA;QAChC,CAAC;QACD,OAAO,CAAC,CAAA;IACV,CAAC;IAED,IAAI,QAAQ;QACV,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAA;QACnB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAA;QAC5B,IAAI,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAA;QAClC,CAAC;QACD,OAAO,CAAC,CAAA;IACV,CAAC;IAED,IAAI,GAAG;QACL,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAA;QACnB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAA;QAC5B,IAAI,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAA;QAC7B,CAAC;QACD,OAAO,CAAC,CAAA;IACV,CAAC;IAED,IAAI,GAAG;QACL,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAA;QACnB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAA;QAC5B,IAAI,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAA;QAC7B,CAAC;QACD,OAAO,CAAC,CAAA;IACV,CAAC;IAED,YAAY,CAAC,EAAU,EAAE,IAAqB;QAC5C,IAAI,CAAC,GAAG,GAAG,EAAE,CAAA;QACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;IACxB,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,GAAG,GAAG,SAAS,CAAA;QACpB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAA;IAC7B,CAAC;CACF","sourcesContent":["import { ObjectStateTree } from '@hydraengine/shared'\n\nexport class WorldTransform {\n  #id?: number\n  #stateTree?: ObjectStateTree\n\n  get x() {\n    const id = this.#id\n    const tree = this.#stateTree\n    if (tree && id !== undefined) {\n      return tree.getWorldX(id)\n    }\n    return NaN\n  }\n\n  get y() {\n    const id = this.#id\n    const tree = this.#stateTree\n    if (tree && id !== undefined) {\n      return tree.getWorldY(id)\n    }\n    return NaN\n  }\n\n  get scaleX() {\n    const id = this.#id\n    const tree = this.#stateTree\n    if (tree && id !== undefined) {\n      return tree.getWorldScaleX(id)\n    }\n    return 1\n  }\n\n  get scaleY() {\n    const id = this.#id\n    const tree = this.#stateTree\n    if (tree && id !== undefined) {\n      return tree.getWorldScaleY(id)\n    }\n    return 1\n  }\n\n  get rotation() {\n    const id = this.#id\n    const tree = this.#stateTree\n    if (tree && id !== undefined) {\n      return tree.getWorldRotation(id)\n    }\n    return 0\n  }\n\n  get cos() {\n    const id = this.#id\n    const tree = this.#stateTree\n    if (tree && id !== undefined) {\n      return tree.getWorldCos(id)\n    }\n    return 1\n  }\n\n  get sin() {\n    const id = this.#id\n    const tree = this.#stateTree\n    if (tree && id !== undefined) {\n      return tree.getWorldSin(id)\n    }\n    return 0\n  }\n\n  setStateTree(id: number, tree: ObjectStateTree) {\n    this.#id = id\n    this.#stateTree = tree\n  }\n\n  clearStateTree() {\n    this.#id = undefined\n    this.#stateTree = undefined\n  }\n}\n"]}