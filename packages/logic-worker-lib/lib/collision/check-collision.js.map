{"version":3,"file":"check-collision.js","sourceRoot":"","sources":["../../src/collision/check-collision.ts"],"names":[],"mappings":"AACA,OAAO,EAA4B,YAAY,EAAuD,MAAM,aAAa,CAAA;AAEzH,wFAAwF;AACxF,qDAAqD;AACrD,wFAAwF;AAExF,MAAM,GAAG,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAE3C,oFAAoF;AACpF,SAAS,cAAc,CAAC,CAAM;IAC5B,OAAO,OAAO,CAAC,KAAK,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;AACpD,CAAC;AACD,SAAS,SAAS,CAAC,GAAG,IAAW;IAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACrC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAAE,OAAO,KAAK,CAAA;IAC5C,CAAC;IACD,OAAO,IAAI,CAAA;AACb,CAAC;AAED,mFAAmF;AACnF,SAAS,cAAc,CAAC,CAAiB;IACvC,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAA;AAC1E,CAAC;AACD,SAAS,SAAS,CAAC,CAAoB;IACrC,OAAO,SAAS,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;AACzD,CAAC;AACD,SAAS,WAAW,CAAC,CAAiB;IACpC,OAAO,SAAS,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;AAChD,CAAC;AACD,SAAS,YAAY,CAAC,CAAkB;IACtC,OAAO,SAAS,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;AACzD,CAAC;AACD,SAAS,SAAS,CAAC,CAAkB;IACnC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,KAAK,CAAA;IACvE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC3C,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;QACvB,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAAE,OAAO,KAAK,CAAA;IAC1C,CAAC;IACD,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;AACtC,CAAC;AAED,wFAAwF;AACxF,4BAA4B;AAC5B,wFAAwF;AAExF,SAAS,eAAe,CACtB,EAAU,EAAE,EAAU,EACtB,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;IAEtE,iCAAiC;IACjC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAAE,OAAO,GAAG,CAAA;IAC1D,qFAAqF;IACrF,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;IAC5B,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;IAC5B,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;IAClC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;IAClC,OAAO,CAAC,GAAG,CAAC,CAAA;AACd,CAAC;AAED,SAAS,aAAa,CACpB,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAC9C,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAC5E,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW;IAE5E,qEAAqE;IACrE,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE,OAAO,IAAI,CAAA;IACvG,MAAM,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;IAC9B,MAAM,EAAE,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAA;IAClC,MAAM,EAAE,GAAG,eAAe,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;IAChE,MAAM,EAAE,GAAG,eAAe,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;IAChE,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAAE,OAAO,IAAI,CAAA;IACvC,OAAO,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;AACvB,CAAC;AAED,wFAAwF;AACxF,mEAAmE;AACnE,wFAAwF;AAExF,SAAS,sBAAsB,CAC7B,EAAqB,EAAE,EAAkB,EACzC,EAAqB,EAAE,EAAkB;IAEzC,0BAA0B;IAC1B,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;QAAE,OAAO,KAAK,CAAA;IAEhG,8CAA8C;IAC9C,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,MAAM,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IACrC,MAAM,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IACtC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAA;IAC9B,MAAM,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,CAAA;IACxB,MAAM,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,CAAA;IACzB,wCAAwC;IACxC,MAAM,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IAC7B,MAAM,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IAC7B,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACvC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IAEvC,UAAU;IACV,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,MAAM,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IACrC,MAAM,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IACtC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAA;IAC9B,MAAM,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,CAAA;IACxB,MAAM,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,CAAA;IACzB,MAAM,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IAC7B,MAAM,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IAC7B,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACvC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IAEvC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE,OAAO,KAAK,CAAA;IAExG,sDAAsD;IACtD,MAAM,IAAI,GAAG,EAAE,CAAC,QAAQ,EAAE,IAAI,GAAG,EAAE,CAAC,QAAQ,CAAA;IAC5C,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;QACjE,MAAM,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC;QAAC,MAAM,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAA;QACtD,MAAM,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC;QAAC,MAAM,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAA;QACtD,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;YAAE,OAAO,KAAK,CAAA;QACxC,OAAO,CAAC,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC,CAAA;IACnD,CAAC;IAED,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;IAClB,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;IAClB,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;QAAE,OAAO,KAAK,CAAA;IAEpC,IAAI,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE,OAAO,KAAK,CAAA;IAC7G,IAAI,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE,OAAO,KAAK,CAAA;IAC7G,IAAI,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE,OAAO,KAAK,CAAA;IAC7G,IAAI,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE,OAAO,KAAK,CAAA;IAE7G,OAAO,IAAI,CAAA;AACb,CAAC;AAED,wFAAwF;AACxF,gCAAgC;AAChC,wFAAwF;AAExF,yFAAyF;AACzF,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,CAAA;AAEtB,mDAAmD;AACnD,SAAS,mBAAmB,CAAC,CAAiB,EAAE,CAAiB;IAC/D,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;QAAC,IAAI,GAAG,GAAU,CAAC;QAAC,IAAI,GAAG,GAAU,CAAC;QAAC,OAAM;IAAC,CAAC;IAC3F,MAAM,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC,MAAM,CAAA;IAClC,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,CAAA;IAC9B,aAAa;IACb,MAAM,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,CAAA;IACxB,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,CAAA;IACzB,sBAAsB;IACtB,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAA;IAC1B,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAA;IAC1B,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;IAC9B,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;AAChC,CAAC;AAED,SAAS,kBAAkB,CAAC,CAAiB,EAAE,CAAiB;IAC9D,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QAAE,OAAO,GAAG,CAAA;IACrD,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;IAC5C,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA,CAAC,eAAe;AACvD,CAAC;AAED,SAAS,0BAA0B,CACjC,EAAkB,EAAE,EAAkB,EAAE,EAAkB,EAAE,EAAkB;IAE9E,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QAAE,OAAO,KAAK,CAAA;IACpG,mBAAmB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAAC,MAAM,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,IAAI,CAAA;IACvD,mBAAmB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAAC,MAAM,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,IAAI,CAAA;IACvD,MAAM,EAAE,GAAG,kBAAkB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;IACrC,MAAM,EAAE,GAAG,kBAAkB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;IACrC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAAE,OAAO,KAAK,CAAA;IACpD,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;IAChC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,CAAA;IACjB,OAAO,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AACrC,CAAC;AAED,wFAAwF;AACxF,+BAA+B;AAC/B,wFAAwF;AAExF,SAAS,wBAAwB,CAC/B,CAAoB,EAAE,EAAkB,EACxC,CAAiB,EAAE,EAAkB;IAErC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QAAE,OAAO,KAAK,CAAA;IAEhG,aAAa;IACb,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IACpC,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IACrC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAA;IAC9B,MAAM,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,CAAA;IACxB,MAAM,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,CAAA;IACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IAC5B,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IAC5B,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACxC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACxC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE,OAAO,KAAK,CAAA;IAEpE,gDAAgD;IAChD,mBAAmB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IAC1B,MAAM,EAAE,GAAG,kBAAkB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IACpC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;QAAE,OAAO,KAAK,CAAA;IAE5C,sDAAsD;IACtD,MAAM,EAAE,GAAG,IAAI,GAAG,GAAG,EAAE,EAAE,GAAG,IAAI,GAAG,GAAG,CAAA;IACtC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;QAAE,OAAO,KAAK,CAAA;IACpC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;IAC9B,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;IAC9B,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;QAAE,OAAO,KAAK,CAAA;IACpC,MAAM,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;IACpD,MAAM,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;IACpD,MAAM,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;IACpB,MAAM,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;IACpB,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC;QAAE,OAAO,KAAK,CAAA;IACtC,OAAO,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,CAAA;AAC3C,CAAC;AAED,wFAAwF;AACxF,kFAAkF;AAClF,wFAAwF;AAExF;;;;;;;;EAQE;AAEF,gCAAgC;AAChC,SAAS,sBAAsB,CAC7B,CAAkB,EAAE,EAAkB,EACtC,CAAkB,EAAE,EAAkB;IAEtC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAAE,OAAO,KAAK,CAAA;IAE9F,MAAM,EAAE,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAA;IACtC,MAAM,EAAE,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,MAAM,CAAA;IACpC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC;QAAE,OAAO,KAAK,CAAA;IAEtC,UAAU;IACV,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAA;IAChC,MAAM,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAA;IAC1B,MAAM,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,CAAA;IAC3B,MAAM,GAAG,GAAG,CAAE,CAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACrC,MAAM,GAAG,GAAG,CAAE,CAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACrC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACxC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IAExC,UAAU;IACV,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAA;IAChC,MAAM,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAA;IAC1B,MAAM,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,CAAA;IAC3B,MAAM,GAAG,GAAG,CAAE,CAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACrC,MAAM,GAAG,GAAG,CAAE,CAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACrC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACxC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IAExC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE,OAAO,KAAK,CAAA;IAE5G,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;IAEvB,gBAAgB;IAChB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;QACxB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;QAChB,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC7B,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC7B,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAA;QACjD,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAA;QACjD,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,CAAA;QACzB,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE,OAAO,KAAK,CAAA;QAEpC,uBAAuB;QACvB,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QAC7C,IAAI,IAAI,GAAG,QAAQ,EAAE,IAAI,GAAG,CAAC,QAAQ,CAAA;QACrC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YACxB,MAAM,CAAC,GAAG,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YAC/C,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAA;YACpC,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;YACtB,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;QACxB,CAAC;QAED,uBAAuB;QACvB,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QAC7C,IAAI,IAAI,GAAG,QAAQ,EAAE,IAAI,GAAG,CAAC,QAAQ,CAAA;QACrC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YACxB,MAAM,CAAC,GAAG,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YAC/C,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAA;YACpC,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;YACtB,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;QACxB,CAAC;QAED,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI;YAAE,OAAO,KAAK,CAAA;IAC9C,CAAC;IAED,gBAAgB;IAChB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;QACxB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;QAChB,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC7B,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC7B,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAA;QACjD,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAA;QACjD,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,CAAA;QACzB,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE,OAAO,KAAK,CAAA;QAEpC,YAAY;QACZ,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QAC7C,IAAI,IAAI,GAAG,QAAQ,EAAE,IAAI,GAAG,CAAC,QAAQ,CAAA;QACrC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YACxB,MAAM,CAAC,GAAG,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YAC/C,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAA;YACpC,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;YACtB,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;QACxB,CAAC;QAED,YAAY;QACZ,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QAC7C,IAAI,IAAI,GAAG,QAAQ,EAAE,IAAI,GAAG,CAAC,QAAQ,CAAA;QACrC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YACxB,MAAM,CAAC,GAAG,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YAC/C,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAA;YACpC,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;YACtB,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;QACxB,CAAC;QAED,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI;YAAE,OAAO,KAAK,CAAA;IAC9C,CAAC;IAED,OAAO,IAAI,CAAA;AACb,CAAC;AAED,kCAAkC;AAClC,SAAS,wBAAwB,CAAC,IAAqB,EAAE,EAAkB,EAAE,CAAiB,EAAE,EAAkB;IAChH,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QAAE,OAAO,KAAK,CAAA;IAEnG,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;IAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;IAAC,IAAI,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAA;IAEtE,aAAa;IACb,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAA;IAChC,MAAM,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAA;IAC1B,MAAM,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,CAAA;IAC3B,MAAM,GAAG,GAAG,CAAE,IAAY,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACxC,MAAM,GAAG,GAAG,CAAE,IAAY,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACxC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACxC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACxC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE,OAAO,KAAK,CAAA;IAEpE,yBAAyB;IACzB,mBAAmB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IAC1B,MAAM,GAAG,GAAG,IAAI,EAAE,GAAG,GAAG,IAAI,CAAA;IAC5B,MAAM,EAAE,GAAG,kBAAkB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IACpC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;QAAE,OAAO,KAAK,CAAA;IAE1C,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;IAEvB,wBAAwB;IACxB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QACvB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;QACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC1B,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC1B,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAA;QAC/C,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAA;QAC/C,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,CAAA;QACzB,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE,OAAO,KAAK,CAAA;QACpC,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QAC7C,IAAI,IAAI,GAAG,QAAQ,EAAE,IAAI,GAAG,CAAC,QAAQ,CAAA;QACrC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACvB,MAAM,CAAC,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YAC7C,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAA;YACpC,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;YACtB,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;QACxB,CAAC;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;QAC/B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;YAAE,OAAO,KAAK,CAAA;QACvC,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QACxC,MAAM,IAAI,GAAG,KAAK,GAAG,EAAE,GAAG,IAAI,CAAA;QAC9B,MAAM,IAAI,GAAG,KAAK,GAAG,EAAE,GAAG,IAAI,CAAA;QAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;YAAE,OAAO,KAAK,CAAA;QACxC,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI;YAAE,OAAO,KAAK,CAAA;IAC9C,CAAC;IAED,0BAA0B;IAC1B,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,QAAQ,CAAA;IAC7C,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QACvB,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC5D,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC5D,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE,OAAO,KAAK,CAAA;QACpC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,CAAA;QACnB,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,CAAA;QACnB,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE,OAAO,KAAK,CAAA;QACpC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;QAC5B,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC;YAAE,OAAO,KAAK,CAAA;QACrC,IAAI,EAAE,GAAG,MAAM,EAAE,CAAC;YAAC,MAAM,GAAG,EAAE,CAAC;YAAC,MAAM,GAAG,EAAE,CAAC;YAAC,MAAM,GAAG,EAAE,CAAA;QAAC,CAAC;IAC5D,CAAC;IACD,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;QAAE,OAAO,KAAK,CAAA;IACzC,IAAI,MAAM,KAAK,CAAC;QAAE,OAAO,IAAI,CAAA;IAC7B,CAAC;QACC,MAAM,EAAE,GAAG,MAAM,EAAE,EAAE,GAAG,MAAM,CAAA;QAC9B,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE,OAAO,KAAK,CAAA;QACpC,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QAC7C,IAAI,IAAI,GAAG,QAAQ,EAAE,IAAI,GAAG,CAAC,QAAQ,CAAA;QACrC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACvB,MAAM,CAAC,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YAC7C,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAA;YACpC,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;YACtB,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;QACxB,CAAC;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;QAC/B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;YAAE,OAAO,KAAK,CAAA;QACvC,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QACxC,MAAM,IAAI,GAAG,KAAK,GAAG,EAAE,GAAG,IAAI,CAAA;QAC9B,MAAM,IAAI,GAAG,KAAK,GAAG,EAAE,GAAG,IAAI,CAAA;QAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;YAAE,OAAO,KAAK,CAAA;QACxC,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI;YAAE,OAAO,KAAK,CAAA;IAC9C,CAAC;IAED,OAAO,IAAI,CAAA;AACb,CAAC;AAED,gCAAgC;AAChC,SAAS,sBAAsB,CAAC,IAAqB,EAAE,EAAkB,EAAE,CAAoB,EAAE,EAAkB;IACjH,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAAE,OAAO,KAAK,CAAA;IAEjG,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;IAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;IAAC,IAAI,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAA;IAEtE,aAAa;IACb,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAA;IAChC,MAAM,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAA;IAC1B,MAAM,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,CAAA;IAC3B,MAAM,GAAG,GAAG,CAAE,IAAY,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACxC,MAAM,GAAG,GAAG,CAAE,IAAY,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACxC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACxC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACxC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE,OAAO,KAAK,CAAA;IAEpE,aAAa;IACb,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IACpC,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IACrC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAA;IAC9B,MAAM,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,CAAA;IACxB,MAAM,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,CAAA;IACzB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACpD,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACxC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACxC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE,OAAO,KAAK,CAAA;IAEpE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;IAEvB,wBAAwB;IACxB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QACvB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;QACf,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC1B,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC1B,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAA;QAC/C,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAA;QAC/C,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,CAAA;QACzB,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE,OAAO,KAAK,CAAA;QAEpC,kBAAkB;QAClB,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QAC7C,IAAI,IAAI,GAAG,QAAQ,EAAE,IAAI,GAAG,CAAC,QAAQ,CAAA;QACrC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACvB,MAAM,CAAC,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YAC7C,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAA;YACpC,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;YACtB,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;QACxB,CAAC;QAED,iCAAiC;QACjC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QAC9B,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QAC9B,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE,OAAO,KAAK,CAAA;QACpC,MAAM,IAAI,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;QAClE,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QACzC,MAAM,IAAI,GAAG,KAAK,GAAG,IAAI,CAAA;QACzB,MAAM,IAAI,GAAG,KAAK,GAAG,IAAI,CAAA;QACzB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;YAAE,OAAO,KAAK,CAAA;QACxC,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI;YAAE,OAAO,KAAK,CAAA;IAC9C,CAAC;IAED,kBAAkB;IAClB,CAAC;QACC,MAAM,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,CAAA;QACxB,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QACrD,IAAI,IAAI,GAAG,QAAQ,EAAE,IAAI,GAAG,CAAC,QAAQ,CAAA;QACrC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACvB,MAAM,CAAC,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YAC7C,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAA;YACpC,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;YACtB,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;QACxB,CAAC;QACD,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QACxC,MAAM,IAAI,GAAG,KAAK,GAAG,GAAG,CAAA;QACxB,MAAM,IAAI,GAAG,KAAK,GAAG,GAAG,CAAA;QACxB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;YAAE,OAAO,KAAK,CAAA;QACxC,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI;YAAE,OAAO,KAAK,CAAA;IAC9C,CAAC;IACD,kBAAkB;IAClB,CAAC;QACC,MAAM,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,CAAA;QACxB,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QACvC,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QACrD,IAAI,IAAI,GAAG,QAAQ,EAAE,IAAI,GAAG,CAAC,QAAQ,CAAA;QACrC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACvB,MAAM,CAAC,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YAC7C,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAA;YACpC,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;YACtB,IAAI,CAAC,GAAG,IAAI;gBAAE,IAAI,GAAG,CAAC,CAAA;QACxB,CAAC;QACD,MAAM,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;QACjC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QACxC,MAAM,IAAI,GAAG,KAAK,GAAG,GAAG,CAAA;QACxB,MAAM,IAAI,GAAG,KAAK,GAAG,GAAG,CAAA;QACxB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;YAAE,OAAO,KAAK,CAAA;QACxC,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI;YAAE,OAAO,KAAK,CAAA;IAC9C,CAAC;IAED,OAAO,IAAI,CAAA;AACb,CAAC;AAED,wFAAwF;AACxF,4EAA4E;AAC5E,wFAAwF;AAExF,oCAAoC;AACpC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAA;AAEpB,oBAAoB;AACpB,IAAW,WAAmF;AAA9F,WAAW,WAAW;IAAG,6CAAQ,CAAA;IAAE,mDAAW,CAAA;IAAE,2CAAO,CAAA;IAAE,iDAAU,CAAA;IAAE,6CAAQ,CAAA;IAAE,uDAAa,CAAA;AAAC,CAAC,EAAnF,WAAW,KAAX,WAAW,QAAwE;AAC9F,IAAI,aAAa,2BAAmB,CAAA;AACpC,IAAI,aAAa,2BAAmB,CAAA;AAEpC,iBAAiB;AACjB,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,CAAA;AAChH,IAAI,MAAM,GAAsC,IAAI,CAAA;AAEpD,iBAAiB;AACjB,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,CAAA;AAChH,IAAI,MAAM,GAAsC,IAAI,CAAA;AAEpD,SAAS,gBAAgB,CAAC,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,CAAS;IACjF,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;IAC9B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,OAAM;IAAC,CAAC;IACxE,IAAI,GAAG,KAAK,CAAC,EAAE,CAAC;QAAC,GAAG,GAAG,EAAE,CAAC;QAAC,GAAG,GAAG,EAAE,CAAC;QAAC,OAAM;IAAC,CAAC;IAC7C,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IACnB,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,CAAA;IACvB,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,CAAA;AACzB,CAAC;AAED,SAAS,aAAa,CACpB,EAAU,EAAE,EAAU,EACtB,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;IAE9F,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,OAAM;IAAC,CAAC;IACtG,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;IAC5B,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;IAC5B,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC3B,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC3B,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;IACtC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;AACxC,CAAC;AAED,SAAS,IAAI,CAAC,EAAU,EAAE,CAAS,IAAI,OAAO,EAAE,GAAG,CAAC,CAAA,CAAC,CAAC,CAAC,qBAAqB;AAE5E,SAAS,iBAAiB,CACxB,EAAU,EAAE,EAAU,EACtB,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;IAE9F,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,OAAM;IAAC,CAAC;IACtG,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;IACjC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;IACjC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAA;IAC1C,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,OAAM;IAAC,CAAC;IAC1E,IAAI,KAAK,KAAK,CAAC,EAAE,CAAC;QAAC,GAAG,GAAG,EAAE,CAAC;QAAC,GAAG,GAAG,EAAE,CAAC;QAAC,OAAM;IAAC,CAAC;IAC/C,MAAM,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,KAAK,CAAA;IACjC,MAAM,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,KAAK,CAAA;IACjC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;IAC5B,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;AAC9B,CAAC;AAED,SAAS,cAAc,CAAC,EAAU,EAAE,EAAU,EAAE,KAAiC;IAC/E,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,OAAM;IAAC,CAAC;IACtE,IAAI,IAAI,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,QAAQ,CAAA;IACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAC7C,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACtC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;QAC3B,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;YAAC,GAAG,GAAG,GAAU,CAAC;YAAC,GAAG,GAAG,GAAU,CAAC;YAAC,OAAM;QAAC,CAAC;QACtE,IAAI,CAAC,GAAG,OAAO,EAAE,CAAC;YAAC,OAAO,GAAG,CAAC,CAAC;YAAC,IAAI,GAAG,CAAC,CAAA;QAAC,CAAC;IAC5C,CAAC;IACD,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IACnB,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACrB,CAAC;AAED,oEAAoE;AACpE,SAAS,mBAAmB,CAC1B,EAAU,EAAE,EAAU,EACtB,KAAiC,EACjC,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;IAE9F,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,OAAM;IAAC,CAAC;IACtG,MAAM,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAA;IACnC,MAAM,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAA;IACnC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,OAAM;IAAC,CAAC;IACtE,IAAI,IAAI,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,QAAQ,CAAA;IACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAC7C,MAAM,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC3C,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;YAAC,GAAG,GAAG,GAAU,CAAC;YAAC,GAAG,GAAG,GAAU,CAAC;YAAC,OAAM;QAAC,CAAC;QACtE,IAAI,CAAC,GAAG,OAAO,EAAE,CAAC;YAAC,OAAO,GAAG,CAAC,CAAC;YAAC,IAAI,GAAG,CAAC,CAAA;QAAC,CAAC;IAC5C,CAAC;IACD,MAAM,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IAC5C,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;IAC1C,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;AAC5C,CAAC;AAED,SAAS,QAAQ,CAAC,EAAU,EAAE,EAAU;IACtC,IAAI,aAAa,gCAAwB;QAAE,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;SAC/G,IAAI,aAAa,4BAAoB;QAAE,aAAa,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;SAC5G,IAAI,aAAa,+BAAuB;QAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;SACpF,IAAI,aAAa,6BAAqB;QAAE,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,MAAO,CAAC,CAAA;SACvE,IAAI,aAAa,kCAA0B;QAAE,mBAAmB,CAAC,EAAE,EAAE,EAAE,EAAE,MAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;SACjI,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,GAAG,GAAG,GAAU,CAAA;IAAC,CAAC;AAC7C,CAAC;AACD,SAAS,QAAQ,CAAC,EAAU,EAAE,EAAU;IACtC,IAAI,aAAa,gCAAwB;QAAE,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;SAC/G,IAAI,aAAa,4BAAoB;QAAE,aAAa,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;SAC5G,IAAI,aAAa,+BAAuB;QAAE,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;SACpF,IAAI,aAAa,6BAAqB;QAAE,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,MAAO,CAAC,CAAA;SACvE,IAAI,aAAa,kCAA0B;QAAE,mBAAmB,CAAC,EAAE,EAAE,EAAE,EAAE,MAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;SACjI,CAAC;QAAC,GAAG,GAAG,GAAU,CAAC;QAAC,GAAG,GAAG,GAAU,CAAA;IAAC,CAAC;AAC7C,CAAC;AAED,mEAAmE;AACnE,SAAS,oBAAoB;IAC3B,0CAA0C;IAC1C,MAAM,GAAG,GAAG,IAAI,CAAA;IAChB,MAAM,IAAI,GAAG,GAAG,GAAG,GAAG,CAAA;IAEtB,2CAA2C;IAC3C,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAA;IAClD,IAAI,CAAC,GAAG,CAAC,CAAA;IAET,mBAAmB;IACnB,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAA;IAElB,iEAAiE;IACjE,SAAS,WAAW;QAClB,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAAC,MAAM,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAA;QAC5C,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;QAAC,MAAM,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAA;QAC9C,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;YAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAU,CAAC;YAAC,OAAM;QAAC,CAAC;QAExF,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAA;QACpC,EAAE,GAAG,EAAE,CAAC;QAAC,EAAE,GAAG,EAAE,CAAA;QAChB,EAAE,GAAG,EAAE,CAAC;QAAC,EAAE,GAAG,EAAE,CAAA;QAChB,EAAE,GAAG,EAAE,CAAC;QAAC,EAAE,GAAG,EAAE,CAAA;QAChB,IAAI,CAAC,GAAG,CAAC;YAAE,CAAC,EAAE,CAAA;IAChB,CAAC;IAED,WAAW,EAAE,CAAA;IACb,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;QAAE,OAAO,KAAK,CAAA;IACpC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,IAAI;QAAE,OAAO,IAAI,CAAA,CAAC,4BAA4B;IACvE,EAAE,GAAG,CAAC,EAAE,CAAC;IAAC,EAAE,GAAG,CAAC,EAAE,CAAA;IAElB,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC;QACrC,MAAM,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;QAC/B,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YAAE,OAAO,KAAK,CAAA;QACxC,IAAI,KAAK,IAAI,IAAI;YAAE,OAAO,IAAI,CAAA,CAAC,iCAAiC;QAEhE,WAAW,EAAE,CAAA;QACb,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;YAAE,OAAO,KAAK,CAAA;QAEpD,2EAA2E;QAC3E,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;QAC5B,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC;YAAE,OAAO,KAAK,CAAA;QACrC,IAAI,EAAE,IAAI,CAAC;YAAE,OAAO,KAAK,CAAA;QACzB,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,IAAI;YAAE,OAAO,IAAI,CAAA;QAE1C,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;YACZ,wCAAwC;YACxC,MAAM,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,CAAA;YAClC,MAAM,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,EAAE,CAAA;YAC1B,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;YAChC,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;YAChC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC;gBAAE,OAAO,KAAK,CAAA;YACxD,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAA;YACxB,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAA;YACxB,SAAQ;QACV,CAAC;QAED,0CAA0C;QAC1C,MAAM,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,CAAA;QAClC,MAAM,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,CAAA;QAClC,MAAM,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,EAAE,CAAA;QAC1B,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;YAAE,OAAO,KAAK,CAAA;QAE1D,8BAA8B;QAC9B,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,IAAI,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,KAAK,CAAA;QACnC,IAAI,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,KAAK,CAAA;QACnC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;YAAE,OAAO,KAAK,CAAA;QACpD,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;YAC9B,qDAAqD;YACrD,EAAE,GAAG,EAAE,CAAC;YAAC,EAAE,GAAG,EAAE,CAAC;YAAC,CAAC,GAAG,CAAC,CAAA;YACvB,EAAE,GAAG,GAAG,CAAC;YAAC,EAAE,GAAG,GAAG,CAAA;YAClB,SAAQ;QACV,CAAC;QAED,8BAA8B;QAC9B,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,IAAI,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,KAAK,CAAA;QACnC,IAAI,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,KAAK,CAAA;QACnC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;YAAE,OAAO,KAAK,CAAA;QACpD,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;YAC9B,qDAAqD;YACrD,EAAE,GAAG,EAAE,CAAC;YAAC,EAAE,GAAG,EAAE,CAAC;YAAC,CAAC,GAAG,CAAC,CAAA;YACvB,EAAE,GAAG,GAAG,CAAC;YAAC,EAAE,GAAG,GAAG,CAAA;YAClB,SAAQ;QACV,CAAC;QAED,4BAA4B;QAC5B,OAAO,IAAI,CAAA;IACb,CAAC;IAED,wBAAwB;IACxB,OAAO,KAAK,CAAA;AACd,CAAC;AAED,wFAAwF;AACxF,gDAAgD;AAChD,wFAAwF;AAExF,SAAS,yBAAyB,CAChC,CAAkB,EAAE,EAAkB,EACtC,CAAoB,EAAE,EAAkB;IAExC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAAE,OAAO,KAAK,CAAA;IAEjG,cAAc;IACd,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IAC/B,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IAChC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAA;IAChC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,CAAC,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAA;IAC/C,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACpD,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAA;IACrC,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAA;IACrC,aAAa,8BAAsB,CAAA;IACnC,MAAM,GAAG,IAAI,CAAA;IAEb,iBAAiB;IACjB,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IAC/B,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IAChC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAA;IAChC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,CAAC,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAA;IAC/C,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACpD,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAA;IACrC,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAA;IACrC,aAAa,0BAAkB,CAAA;IAC/B,MAAM,GAAG,IAAI,CAAA;IAEb,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;QAAE,OAAO,KAAK,CAAA;IAC5H,OAAO,oBAAoB,EAAE,CAAA;AAC/B,CAAC;AAED,SAAS,2BAA2B,CAClC,CAAkB,EAAE,EAAkB,EACtC,CAAiB,EAAE,EAAkB;IAErC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QAAE,OAAO,KAAK,CAAA;IAEnG,cAAc;IACd,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IAC/B,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IAChC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAA;IAChC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,CAAC,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAA;IAC/C,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACpD,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAA;IACrC,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAA;IACrC,aAAa,8BAAsB,CAAA;IACnC,MAAM,GAAG,IAAI,CAAA;IAEb,aAAa;IACb,mBAAmB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IAC1B,IAAI,GAAG,IAAI,CAAC;IAAC,IAAI,GAAG,IAAI,CAAA;IACxB,IAAI,GAAG,kBAAkB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IAChC,aAAa,6BAAqB,CAAA;IAClC,MAAM,GAAG,IAAI,CAAA;IAEb,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;QAAE,OAAO,KAAK,CAAA;IAC9F,OAAO,oBAAoB,EAAE,CAAA;AAC/B,CAAC;AAED,SAAS,4BAA4B,CACnC,CAAkB,EAAE,EAAkB,EACtC,CAAkB,EAAE,EAAkB;IAEtC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAAE,OAAO,KAAK,CAAA;IAEpG,IAAI;IACJ,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IAC/B,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IAChC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAA;IAChC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,CAAC,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAA;IAC/C,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACpD,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAA;IACrC,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAA;IACrC,aAAa,8BAAsB,CAAA;IACnC,MAAM,GAAG,IAAI,CAAA;IAEb,IAAI;IACJ,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IAC/B,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IAChC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAA;IAChC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,CAAC,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAA;IAC/C,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACpD,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAA;IACrC,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAA;IACrC,aAAa,8BAAsB,CAAA;IACnC,MAAM,GAAG,IAAI,CAAA;IAEb,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;QAAE,OAAO,KAAK,CAAA;IAC5H,OAAO,oBAAoB,EAAE,CAAA;AAC/B,CAAC;AAED,iFAAiF;AACjF,SAAS,yBAAyB,CAAC,IAAqB,EAAE,EAAkB,EAAE,CAAkB,EAAE,EAAkB;IAClH,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAAE,OAAO,KAAK,CAAA;IAEpG,8EAA8E;IAC9E,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAA;IAChC,MAAM,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAA;IAC1B,MAAM,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,CAAA;IAC3B,MAAM,GAAG,GAAG,CAAE,IAAY,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACxC,MAAM,GAAG,GAAG,CAAE,IAAY,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACxC,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACnC,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;IACnC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAA;IAC9C,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAA;IACtB,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAA;IACtB,aAAa,gCAAwB,CAAA;IAErC,cAAc;IACd,MAAM,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;IACtC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IAC/B,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;IAChC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAA;IAChC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAC;IAAC,IAAI,GAAG,CAAC,GAAG,CAAC;IAAC,IAAI,GAAG,GAAG,CAAA;IAC/C,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAA;IACpD,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAA;IACrC,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAA;IACrC,MAAM,GAAG,IAAI,CAAA;IACb,aAAa,8BAAsB,CAAA;IAEnC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;QAAE,OAAO,KAAK,CAAA;IAC5H,OAAO,oBAAoB,EAAE,CAAA;AAC/B,CAAC;AAED,wFAAwF;AACxF,8BAA8B;AAC9B,wFAAwF;AAExF,MAAM,UAAU,cAAc,CAAC,EAAY,EAAE,EAAkB,EAAE,EAAY,EAAE,EAAkB;IAC/F,kCAAkC;IAClC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC;QAAE,OAAO,KAAK,CAAA;IAE5D,sBAAsB;IACtB,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,SAAS,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,SAAS;QAC1E,OAAO,sBAAsB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IAE/C,gBAAgB;IAChB,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,MAAM;QACpE,OAAO,0BAA0B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IAEnD,4BAA4B;IAC5B,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,SAAS,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,MAAM;QACvE,OAAO,wBAAwB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IACjD,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,SAAS;QACvE,OAAO,wBAAwB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IAEjD,sCAAsC;IACtC,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO;QACtE,OAAO,sBAAsB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IAE/C,8DAA8D;IAC9D,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,MAAM;QACrE,OAAO,wBAAwB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IACjD,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO;QACrE,OAAO,wBAAwB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IAEjD,4DAA4D;IAC5D,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,SAAS;QACxE,OAAO,sBAAsB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IAC/C,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,SAAS,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO;QACxE,OAAO,sBAAsB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IAE/C,+BAA+B;IAC/B,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,SAAS;QACxE,OAAO,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IAClD,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,SAAS,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO;QACxE,OAAO,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IAElD,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,MAAM;QACrE,OAAO,2BAA2B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IACpD,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO;QACrE,OAAO,2BAA2B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IAEpD,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO;QACtE,OAAO,4BAA4B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IAErD,oFAAoF;IACpF,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO;QACtE,OAAO,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IAClD,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO;QACtE,OAAO,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IAElD,OAAO,KAAK,CAAA;AACd,CAAC","sourcesContent":["import { WorldTransform } from '../logic-node/core/world-transform'\nimport { CircleCollider, Collider, ColliderType, EllipseCollider, PolygonCollider, RectangleCollider } from './colliders'\n\n// =====================================================================================\n// Utilities (scalar-only, no allocations at runtime)\n// =====================================================================================\n\nconst abs = (v: number) => (v < 0 ? -v : v)\n\n// ---- numeric guards -------------------------------------------------------------\nfunction isFiniteNumber(n: any): n is number {\n  return typeof n === 'number' && Number.isFinite(n)\n}\nfunction allFinite(...nums: any[]): boolean {\n  for (let i = 0; i < nums.length; i++) {\n    if (!isFiniteNumber(nums[i])) return false\n  }\n  return true\n}\n\n// ---- collider / transform validators -------------------------------------------\nfunction validTransform(t: WorldTransform): boolean {\n  return allFinite(t.x, t.y, t.cos, t.sin, t.scaleX, t.scaleY, t.rotation)\n}\nfunction validRect(r: RectangleCollider): boolean {\n  return allFinite(r.width, r.height, r.x ?? 0, r.y ?? 0)\n}\nfunction validCircle(c: CircleCollider): boolean {\n  return allFinite(c.radius, c.x ?? 0, c.y ?? 0)\n}\nfunction validEllipse(e: EllipseCollider): boolean {\n  return allFinite(e.width, e.height, e.x ?? 0, e.y ?? 0)\n}\nfunction validPoly(p: PolygonCollider): boolean {\n  if (!Array.isArray(p.vertices) || p.vertices.length === 0) return false\n  for (let i = 0; i < p.vertices.length; i++) {\n    const v = p.vertices[i]\n    if (!allFinite(v?.x, v?.y)) return false\n  }\n  return allFinite(p.x ?? 0, p.y ?? 0)\n}\n\n// =====================================================================================\n// OBB helpers (scalar-only)\n// =====================================================================================\n\nfunction obbRadiusOnAxis(\n  Lx: number, Ly: number,\n  ux: number, uy: number, vx: number, vy: number, hx: number, hy: number\n) {\n  // Guard: invalid → propagate NaN\n  if (!allFinite(Lx, Ly, ux, uy, vx, vy, hx, hy)) return NaN\n  // hx, hy must be >= 0; project axis onto OBB's local axes and scale by half extents.\n  const Lu = Lx * ux + Ly * uy\n  const Lv = Lx * vx + Ly * vy\n  const a = hx * (Lu < 0 ? -Lu : Lu)\n  const b = hy * (Lv < 0 ? -Lv : Lv)\n  return a + b\n}\n\nfunction axisSeparates(\n  Lx: number, Ly: number, dx: number, dy: number,\n  aux: number, auy: number, avx: number, avy: number, ahx: number, ahy: number,\n  bux: number, buy: number, bvx: number, bvy: number, bhx: number, bhy: number\n) {\n  // Invalid input → treat as separated to avoid false-positive overlap\n  if (!allFinite(Lx, Ly, dx, dy, aux, auy, avx, avy, ahx, ahy, bux, buy, bvx, bvy, bhx, bhy)) return true\n  const dist = dx * Lx + dy * Ly\n  const ad = dist < 0 ? -dist : dist\n  const rA = obbRadiusOnAxis(Lx, Ly, aux, auy, avx, avy, ahx, ahy)\n  const rB = obbRadiusOnAxis(Lx, Ly, bux, buy, bvx, bvy, bhx, bhy)\n  if (!allFinite(ad, rA, rB)) return true\n  return ad > (rA + rB)\n}\n\n// =====================================================================================\n// Rectangle–Rectangle (OBB–OBB) — SAT with 4 axes (no allocations)\n// =====================================================================================\n\nfunction checkRectRectCollision(\n  ca: RectangleCollider, ta: WorldTransform,\n  cb: RectangleCollider, tb: WorldTransform\n): boolean {\n  // Fast invalid-input exit\n  if (!validTransform(ta) || !validTransform(tb) || !validRect(ca) || !validRect(cb)) return false\n\n  // A frame (half extents must be non-negative)\n  const asx = ta.scaleX, asy = ta.scaleY\n  const ahx = abs(ca.width * asx) * 0.5\n  const ahy = abs(ca.height * asy) * 0.5\n  const cA = ta.cos, sA = ta.sin\n  const aux = cA, auy = sA\n  const avx = -sA, avy = cA\n  // apply rotated local offset for center\n  const aox = (ca.x || 0) * asx\n  const aoy = (ca.y || 0) * asy\n  const ax = ta.x + aux * aox + avx * aoy\n  const ay = ta.y + auy * aox + avy * aoy\n\n  // B frame\n  const bsx = tb.scaleX, bsy = tb.scaleY\n  const bhx = abs(cb.width * bsx) * 0.5\n  const bhy = abs(cb.height * bsy) * 0.5\n  const cB = tb.cos, sB = tb.sin\n  const bux = cB, buy = sB\n  const bvx = -sB, bvy = cB\n  const box = (cb.x || 0) * bsx\n  const boy = (cb.y || 0) * bsy\n  const bx = tb.x + bux * box + bvx * boy\n  const by = tb.y + buy * box + bvy * boy\n\n  if (!allFinite(ahx, ahy, bhx, bhy, ax, ay, bx, by, aux, auy, avx, avy, bux, buy, bvx, bvy)) return false\n\n  // Fast axis-aligned branch if both rotations are zero\n  const rotA = ta.rotation, rotB = tb.rotation\n  if ((rotA === 0 || rotA === 0.0) && (rotB === 0 || rotB === 0.0)) {\n    const dx0 = bx - ax; const adx0 = dx0 < 0 ? -dx0 : dx0\n    const dy0 = by - ay; const ady0 = dy0 < 0 ? -dy0 : dy0\n    if (!allFinite(adx0, ady0)) return false\n    return (adx0 <= ahx + bhx) && (ady0 <= ahy + bhy)\n  }\n\n  const dx = bx - ax\n  const dy = by - ay\n  if (!allFinite(dx, dy)) return false\n\n  if (axisSeparates(aux, auy, dx, dy, aux, auy, avx, avy, ahx, ahy, bux, buy, bvx, bvy, bhx, bhy)) return false\n  if (axisSeparates(avx, avy, dx, dy, aux, auy, avx, avy, ahx, ahy, bux, buy, bvx, bvy, bhx, bhy)) return false\n  if (axisSeparates(bux, buy, dx, dy, aux, auy, avx, avy, ahx, ahy, bux, buy, bvx, bvy, bhx, bhy)) return false\n  if (axisSeparates(bvx, bvy, dx, dy, aux, auy, avx, avy, ahx, ahy, bux, buy, bvx, bvy, bhx, bhy)) return false\n\n  return true\n}\n\n// =====================================================================================\n// Circle tools (no allocations)\n// =====================================================================================\n\n// scratch for circle center computations (reused everywhere; no runtime object creation)\nlet _ccx = 0, _ccy = 0\n\n// Writes the world-space center into (_ccx, _ccy).\nfunction circleCenterScratch(c: CircleCollider, t: WorldTransform): void {\n  if (!validTransform(t) || !validCircle(c)) { _ccx = NaN as any; _ccy = NaN as any; return }\n  const sx = t.scaleX, sy = t.scaleY\n  const cos = t.cos, sin = t.sin\n  // local axes\n  const ux = cos, uy = sin\n  const vx = -sin, vy = cos\n  // scaled local offset\n  const ox = (c.x || 0) * sx\n  const oy = (c.y || 0) * sy\n  _ccx = t.x + ux * ox + vx * oy\n  _ccy = t.y + uy * ox + vy * oy\n}\n\nfunction circleScaledRadius(c: CircleCollider, t: WorldTransform) {\n  if (!validTransform(t) || !validCircle(c)) return NaN\n  const sx = abs(t.scaleX), sy = abs(t.scaleY)\n  return c.radius * (sx > sy ? sx : sy) // conservative\n}\n\nfunction checkCircleCircleCollision(\n  ca: CircleCollider, ta: WorldTransform, cb: CircleCollider, tb: WorldTransform\n): boolean {\n  if (!validTransform(ta) || !validTransform(tb) || !validCircle(ca) || !validCircle(cb)) return false\n  circleCenterScratch(ca, ta); const ax = _ccx, ay = _ccy\n  circleCenterScratch(cb, tb); const bx = _ccx, by = _ccy\n  const ra = circleScaledRadius(ca, ta)\n  const rb = circleScaledRadius(cb, tb)\n  if (!allFinite(ax, ay, bx, by, ra, rb)) return false\n  const dx = bx - ax, dy = by - ay\n  const r = ra + rb\n  return (dx * dx + dy * dy) <= r * r\n}\n\n// =====================================================================================\n// Rect–Circle (no allocations)\n// =====================================================================================\n\nfunction checkRectCircleCollision(\n  r: RectangleCollider, tr: WorldTransform,\n  c: CircleCollider, tc: WorldTransform\n): boolean {\n  if (!validTransform(tr) || !validTransform(tc) || !validRect(r) || !validCircle(c)) return false\n\n  // Rect frame\n  const rsx = tr.scaleX, rsy = tr.scaleY\n  const rhx = abs(r.width * rsx) * 0.5\n  const rhy = abs(r.height * rsy) * 0.5\n  const rc = tr.cos, rs = tr.sin\n  const rux = rc, ruy = rs\n  const rvx = -rs, rvy = rc\n  const rox = (r.x || 0) * rsx\n  const roy = (r.y || 0) * rsy\n  const rcx = tr.x + rux * rox + rvx * roy\n  const rcy = tr.y + ruy * rox + rvy * roy\n  if (!allFinite(rhx, rhy, rux, ruy, rvx, rvy, rcx, rcy)) return false\n\n  // Circle center + radius (into scratch scalars)\n  circleCenterScratch(c, tc)\n  const rr = circleScaledRadius(c, tc)\n  if (!allFinite(_ccx, _ccy, rr)) return false\n\n  // Project center delta onto rect local axes and clamp\n  const dx = _ccx - rcx, dy = _ccy - rcy\n  if (!allFinite(dx, dy)) return false\n  const qx = dx * rux + dy * ruy\n  const qy = dx * rvx + dy * rvy\n  if (!allFinite(qx, qy)) return false\n  const clx = qx < -rhx ? -rhx : (qx > rhx ? rhx : qx)\n  const cly = qy < -rhy ? -rhy : (qy > rhy ? rhy : qy)\n  const ddx = qx - clx\n  const ddy = qy - cly\n  if (!allFinite(ddx, ddy)) return false\n  return (ddx * ddx + ddy * ddy) <= rr * rr\n}\n\n// =====================================================================================\n// Polygon helpers — SAT (no allocations; polygons are in LOCAL space + Transform)\n// =====================================================================================\n\n/*\n  Notes:\n  - Polygons are stored in LOCAL space. We never allocate world-space copies.\n  - For any world axis N = (nx, ny), projection of a local vertex (vx, vy) is:\n      dot(N, C) + dot(N, U)*sx*vx + dot(N, V)*sy*vy\n    where C is world center, U/V are world unit axes of the polygon frame,\n    and sx/sy are scale on those local axes.\n  - No objects/arrays are created at runtime. Only scalar computations and loops.\n*/\n\n// Poly–Poly (LOCAL + Transform)\nfunction checkPolyPolyCollision(\n  a: PolygonCollider, ta: WorldTransform,\n  b: PolygonCollider, tb: WorldTransform\n): boolean {\n  if (!validTransform(ta) || !validTransform(tb) || !validPoly(a) || !validPoly(b)) return false\n\n  const av = a.vertices, bv = b.vertices\n  const na = av.length, nb = bv.length\n  if (na === 0 || nb === 0) return false\n\n  // Frame A\n  const asx = ta.scaleX, asy = ta.scaleY\n  const acs = ta.cos, asn = ta.sin\n  const aux = acs, auy = asn\n  const avx = -asn, avy = acs\n  const aox = ((a as any).x || 0) * asx\n  const aoy = ((a as any).y || 0) * asy\n  const acx = ta.x + aux * aox + avx * aoy\n  const acy = ta.y + auy * aox + avy * aoy\n\n  // Frame B\n  const bsx = tb.scaleX, bsy = tb.scaleY\n  const bcs = tb.cos, bsn = tb.sin\n  const bux = bcs, buy = bsn\n  const bvx = -bsn, bvy = bcs\n  const box = ((b as any).x || 0) * bsx\n  const boy = ((b as any).y || 0) * bsy\n  const bcx = tb.x + bux * box + bvx * boy\n  const bcy = tb.y + buy * box + bvy * boy\n\n  if (!allFinite(asx, asy, aux, auy, avx, avy, acx, acy, bsx, bsy, bux, buy, bvx, bvy, bcx, bcy)) return false\n\n  let i = 0, j = 0, k = 0\n\n  // A's edge axes\n  for (i = 0; i < na; i++) {\n    j = (i + 1) % na\n    const adx = av[j].x - av[i].x\n    const ady = av[j].y - av[i].y\n    const ewx = aux * (asx * adx) + avx * (asy * ady)\n    const ewy = auy * (asx * adx) + avy * (asy * ady)\n    const nx = -ewy, ny = ewx\n    if (!allFinite(nx, ny)) return false\n\n    // project A on (nx,ny)\n    const kUa = (nx * aux + ny * auy) * asx\n    const kVa = (nx * avx + ny * avy) * asy\n    const baseA = nx * acx + ny * acy\n    if (!allFinite(kUa, kVa, baseA)) return false\n    let minA = Infinity, maxA = -Infinity\n    for (k = 0; k < na; k++) {\n      const s = baseA + kUa * av[k].x + kVa * av[k].y\n      if (!isFiniteNumber(s)) return false\n      if (s < minA) minA = s\n      if (s > maxA) maxA = s\n    }\n\n    // project B on (nx,ny)\n    const kUb = (nx * bux + ny * buy) * bsx\n    const kVb = (nx * bvx + ny * bvy) * bsy\n    const baseB = nx * bcx + ny * bcy\n    if (!allFinite(kUb, kVb, baseB)) return false\n    let minB = Infinity, maxB = -Infinity\n    for (k = 0; k < nb; k++) {\n      const s = baseB + kUb * bv[k].x + kVb * bv[k].y\n      if (!isFiniteNumber(s)) return false\n      if (s < minB) minB = s\n      if (s > maxB) maxB = s\n    }\n\n    if (maxA < minB || maxB < minA) return false\n  }\n\n  // B's edge axes\n  for (i = 0; i < nb; i++) {\n    j = (i + 1) % nb\n    const bdx = bv[j].x - bv[i].x\n    const bdy = bv[j].y - bv[i].y\n    const ewx = bux * (bsx * bdx) + bvx * (bsy * bdy)\n    const ewy = buy * (bsx * bdx) + bvy * (bsy * bdy)\n    const nx = -ewy, ny = ewx\n    if (!allFinite(nx, ny)) return false\n\n    // project A\n    const kUa = (nx * aux + ny * auy) * asx\n    const kVa = (nx * avx + ny * avy) * asy\n    const baseA = nx * acx + ny * acy\n    if (!allFinite(kUa, kVa, baseA)) return false\n    let minA = Infinity, maxA = -Infinity\n    for (k = 0; k < na; k++) {\n      const s = baseA + kUa * av[k].x + kVa * av[k].y\n      if (!isFiniteNumber(s)) return false\n      if (s < minA) minA = s\n      if (s > maxA) maxA = s\n    }\n\n    // project B\n    const kUb = (nx * bux + ny * buy) * bsx\n    const kVb = (nx * bvx + ny * bvy) * bsy\n    const baseB = nx * bcx + ny * bcy\n    if (!allFinite(kUb, kVb, baseB)) return false\n    let minB = Infinity, maxB = -Infinity\n    for (k = 0; k < nb; k++) {\n      const s = baseB + kUb * bv[k].x + kVb * bv[k].y\n      if (!isFiniteNumber(s)) return false\n      if (s < minB) minB = s\n      if (s > maxB) maxB = s\n    }\n\n    if (maxA < minB || maxB < minA) return false\n  }\n\n  return true\n}\n\n// Poly–Circle (LOCAL + Transform)\nfunction checkPolyCircleCollision(poly: PolygonCollider, tp: WorldTransform, c: CircleCollider, tc: WorldTransform): boolean {\n  if (!validTransform(tp) || !validTransform(tc) || !validPoly(poly) || !validCircle(c)) return false\n\n  const v = poly.vertices; const n = v.length; if (n === 0) return false\n\n  // Poly frame\n  const psx = tp.scaleX, psy = tp.scaleY\n  const pcs = tp.cos, psn = tp.sin\n  const pux = pcs, puy = psn\n  const pvx = -psn, pvy = pcs\n  const pox = ((poly as any).x || 0) * psx\n  const poy = ((poly as any).y || 0) * psy\n  const pcx = tp.x + pux * pox + pvx * poy\n  const pcy = tp.y + puy * pox + pvy * poy\n  if (!allFinite(psx, psy, pux, puy, pvx, pvy, pcx, pcy)) return false\n\n  // Circle center + radius\n  circleCenterScratch(c, tc)\n  const CCx = _ccx, CCy = _ccy\n  const rr = circleScaledRadius(c, tc)\n  if (!allFinite(CCx, CCy, rr)) return false\n\n  let i = 0, j = 0, k = 0\n\n  // (A) Polygon edge axes\n  for (i = 0; i < n; i++) {\n    j = (i + 1) % n\n    const dx = v[j].x - v[i].x\n    const dy = v[j].y - v[i].y\n    const ewx = pux * (psx * dx) + pvx * (psy * dy)\n    const ewy = puy * (psx * dx) + pvy * (psy * dy)\n    const nx = -ewy, ny = ewx\n    if (!allFinite(nx, ny)) return false\n    const kUp = (nx * pux + ny * puy) * psx\n    const kVp = (nx * pvx + ny * pvy) * psy\n    const baseP = nx * pcx + ny * pcy\n    if (!allFinite(kUp, kVp, baseP)) return false\n    let minP = Infinity, maxP = -Infinity\n    for (k = 0; k < n; k++) {\n      const s = baseP + kUp * v[k].x + kVp * v[k].y\n      if (!isFiniteNumber(s)) return false\n      if (s < minP) minP = s\n      if (s > maxP) maxP = s\n    }\n    const nlen = Math.hypot(nx, ny)\n    if (!isFiniteNumber(nlen)) return false\n    const cProj = nx * CCx + ny * CCy\n    if (!isFiniteNumber(cProj)) return false\n    const minC = cProj - rr * nlen\n    const maxC = cProj + rr * nlen\n    if (!allFinite(minC, maxC)) return false\n    if (maxP < minC || maxC < minP) return false\n  }\n\n  // (B) Closest-vertex axis\n  let bestDx = 0, bestDy = 0, bestD2 = Infinity\n  for (i = 0; i < n; i++) {\n    const wx = pcx + pux * (psx * v[i].x) + pvx * (psy * v[i].y)\n    const wy = pcy + puy * (psx * v[i].x) + pvy * (psy * v[i].y)\n    if (!allFinite(wx, wy)) return false\n    const dx = CCx - wx\n    const dy = CCy - wy\n    if (!allFinite(dx, dy)) return false\n    const d2 = dx * dx + dy * dy\n    if (!isFiniteNumber(d2)) return false\n    if (d2 < bestD2) { bestD2 = d2; bestDx = dx; bestDy = dy }\n  }\n  if (!isFiniteNumber(bestD2)) return false\n  if (bestD2 === 0) return true\n  {\n    const nx = bestDx, ny = bestDy\n    if (!allFinite(nx, ny)) return false\n    const kUp = (nx * pux + ny * puy) * psx\n    const kVp = (nx * pvx + ny * pvy) * psy\n    const baseP = nx * pcx + ny * pcy\n    if (!allFinite(kUp, kVp, baseP)) return false\n    let minP = Infinity, maxP = -Infinity\n    for (i = 0; i < n; i++) {\n      const s = baseP + kUp * v[i].x + kVp * v[i].y\n      if (!isFiniteNumber(s)) return false\n      if (s < minP) minP = s\n      if (s > maxP) maxP = s\n    }\n    const nlen = Math.hypot(nx, ny)\n    if (!isFiniteNumber(nlen)) return false\n    const cProj = nx * CCx + ny * CCy\n    if (!isFiniteNumber(cProj)) return false\n    const minC = cProj - rr * nlen\n    const maxC = cProj + rr * nlen\n    if (!allFinite(minC, maxC)) return false\n    if (maxP < minC || maxC < minP) return false\n  }\n\n  return true\n}\n\n// Poly–Rect (LOCAL + Transform)\nfunction checkPolyRectCollision(poly: PolygonCollider, tp: WorldTransform, r: RectangleCollider, tr: WorldTransform): boolean {\n  if (!validTransform(tp) || !validTransform(tr) || !validPoly(poly) || !validRect(r)) return false\n\n  const v = poly.vertices; const n = v.length; if (n === 0) return false\n\n  // Poly frame\n  const psx = tp.scaleX, psy = tp.scaleY\n  const pcs = tp.cos, psn = tp.sin\n  const pux = pcs, puy = psn\n  const pvx = -psn, pvy = pcs\n  const pox = ((poly as any).x || 0) * psx\n  const poy = ((poly as any).y || 0) * psy\n  const pcx = tp.x + pux * pox + pvx * poy\n  const pcy = tp.y + puy * pox + pvy * poy\n  if (!allFinite(psx, psy, pux, puy, pvx, pvy, pcx, pcy)) return false\n\n  // Rect frame\n  const rsx = tr.scaleX, rsy = tr.scaleY\n  const rhx = abs(r.width * rsx) * 0.5\n  const rhy = abs(r.height * rsy) * 0.5\n  const rc = tr.cos, rs = tr.sin\n  const rux = rc, ruy = rs\n  const rvx = -rs, rvy = rc\n  const rox = (r.x || 0) * rsx, roy = (r.y || 0) * rsy\n  const rcx = tr.x + rux * rox + rvx * roy\n  const rcy = tr.y + ruy * rox + rvy * roy\n  if (!allFinite(rhx, rhy, rux, ruy, rvx, rvy, rcx, rcy)) return false\n\n  let i = 0, j = 0, k = 0\n\n  // (A) polygon edge axes\n  for (i = 0; i < n; i++) {\n    j = (i + 1) % n\n    const dx = v[j].x - v[i].x\n    const dy = v[j].y - v[i].y\n    const ewx = pux * (psx * dx) + pvx * (psy * dy)\n    const ewy = puy * (psx * dx) + pvy * (psy * dy)\n    const nx = -ewy, ny = ewx\n    if (!allFinite(nx, ny)) return false\n\n    // poly projection\n    const kUp = (nx * pux + ny * puy) * psx\n    const kVp = (nx * pvx + ny * pvy) * psy\n    const baseP = nx * pcx + ny * pcy\n    if (!allFinite(kUp, kVp, baseP)) return false\n    let minP = Infinity, maxP = -Infinity\n    for (k = 0; k < n; k++) {\n      const s = baseP + kUp * v[k].x + kVp * v[k].y\n      if (!isFiniteNumber(s)) return false\n      if (s < minP) minP = s\n      if (s > maxP) maxP = s\n    }\n\n    // rect projection radius on axis\n    const nu = nx * rux + ny * ruy\n    const nv = nx * rvx + ny * rvy\n    if (!allFinite(nu, nv)) return false\n    const rRad = rhx * (nu < 0 ? -nu : nu) + rhy * (nv < 0 ? -nv : nv)\n    const cProj = nx * rcx + ny * rcy\n    if (!allFinite(rRad, cProj)) return false\n    const minR = cProj - rRad\n    const maxR = cProj + rRad\n    if (!allFinite(minR, maxR)) return false\n    if (maxP < minR || maxR < minP) return false\n  }\n\n  // (B) rect axis u\n  {\n    const nx = rux, ny = ruy\n    const kUp = (nx * pux + ny * puy) * psx\n    const kVp = (nx * pvx + ny * pvy) * psy\n    const baseP = nx * pcx + ny * pcy\n    if (!allFinite(nx, ny, kUp, kVp, baseP)) return false\n    let minP = Infinity, maxP = -Infinity\n    for (i = 0; i < n; i++) {\n      const s = baseP + kUp * v[i].x + kVp * v[i].y\n      if (!isFiniteNumber(s)) return false\n      if (s < minP) minP = s\n      if (s > maxP) maxP = s\n    }\n    const cProj = nx * rcx + ny * rcy\n    if (!isFiniteNumber(cProj)) return false\n    const minR = cProj - rhx\n    const maxR = cProj + rhx\n    if (!allFinite(minR, maxR)) return false\n    if (maxP < minR || maxR < minP) return false\n  }\n  // (C) rect axis v\n  {\n    const nx = rvx, ny = rvy\n    const kUp = (nx * pux + ny * puy) * psx\n    const kVp = (nx * pvx + ny * pvy) * psy\n    const baseP = nx * pcx + ny * pcy\n    if (!allFinite(nx, ny, kUp, kVp, baseP)) return false\n    let minP = Infinity, maxP = -Infinity\n    for (i = 0; i < n; i++) {\n      const s = baseP + kUp * v[i].x + kVp * v[i].y\n      if (!isFiniteNumber(s)) return false\n      if (s < minP) minP = s\n      if (s > maxP) maxP = s\n    }\n    const cProj = nx * rcx + ny * rcy\n    if (!isFiniteNumber(cProj)) return false\n    const minR = cProj - rhy\n    const maxR = cProj + rhy\n    if (!allFinite(minR, maxR)) return false\n    if (maxP < minR || maxR < minP) return false\n  }\n\n  return true\n}\n\n// =====================================================================================\n// GJK (no allocations: global scratch + selectable supports) — FIXED/ROBUST\n// =====================================================================================\n\n// Global scratch for support result\nlet _sx = 0, _sy = 0\n\n// Support selectors\nconst enum SupportType { None = 0, Ellipse = 1, OBB = 2, Circle = 3, Poly = 4, PolyLocal = 5 }\nlet _supportAType = SupportType.None\nlet _supportBType = SupportType.None\n\n// A-shape params\nlet _Acx = 0, _Acy = 0, _Aux = 0, _Auy = 0, _Avx = 0, _Avy = 0, _Arx = 0, _Ary = 0, _Ahx = 0, _Ahy = 0, _Arr = 0\nlet _Apoly: { x: number, y: number }[] | null = null\n\n// B-shape params\nlet _Bcx = 0, _Bcy = 0, _Bux = 0, _Buy = 0, _Bvx = 0, _Bvy = 0, _Brx = 0, _Bry = 0, _Bhx = 0, _Bhy = 0, _Brr = 0\nlet _Bpoly: { x: number, y: number }[] | null = null\n\nfunction setSupportCircle(dx: number, dy: number, cx: number, cy: number, r: number) {\n  const len = Math.hypot(dx, dy)\n  if (!isFiniteNumber(len)) { _sx = NaN as any; _sy = NaN as any; return }\n  if (len === 0) { _sx = cx; _sy = cy; return }\n  const inv = 1 / len\n  _sx = cx + dx * inv * r\n  _sy = cy + dy * inv * r\n}\n\nfunction setSupportOBB(\n  dx: number, dy: number,\n  cx: number, cy: number, ux: number, uy: number, vx: number, vy: number, hx: number, hy: number\n) {\n  if (!allFinite(dx, dy, cx, cy, ux, uy, vx, vy, hx, hy)) { _sx = NaN as any; _sy = NaN as any; return }\n  const du = dx * ux + dy * uy\n  const dv = dx * vx + dy * vy\n  const sx = du >= 0 ? 1 : -1\n  const sy = dv >= 0 ? 1 : -1\n  _sx = cx + ux * hx * sx + vx * hy * sy\n  _sy = cy + uy * hx * sx + vy * hy * sy\n}\n\nfunction dvDy(dy: number, a: number) { return dy * a } // tiny inline helper\n\nfunction setSupportEllipse(\n  dx: number, dy: number,\n  cx: number, cy: number, ux: number, uy: number, vx: number, vy: number, rx: number, ry: number\n) {\n  if (!allFinite(dx, dy, cx, cy, ux, uy, vx, vy, rx, ry)) { _sx = NaN as any; _sy = NaN as any; return }\n  const du = dx * ux + dvDy(dy, uy)\n  const dv = dx * vx + dvDy(dy, vy)\n  const denom = Math.hypot(rx * du, ry * dv)\n  if (!isFiniteNumber(denom)) { _sx = NaN as any; _sy = NaN as any; return }\n  if (denom === 0) { _sx = cx; _sy = cy; return }\n  const kU = (rx * rx * du) / denom\n  const kV = (ry * ry * dv) / denom\n  _sx = cx + kU * ux + kV * vx\n  _sy = cy + kU * uy + kV * vy\n}\n\nfunction setSupportPoly(dx: number, dy: number, verts: { x: number, y: number }[]) {\n  if (!allFinite(dx, dy)) { _sx = NaN as any; _sy = NaN as any; return }\n  let best = 0, bestDot = -Infinity\n  for (let i = 0, n = verts.length; i < n; i++) {\n    const vx = verts[i].x, vy = verts[i].y\n    const d = dx * vx + dy * vy\n    if (!isFiniteNumber(d)) { _sx = NaN as any; _sy = NaN as any; return }\n    if (d > bestDot) { bestDot = d; best = i }\n  }\n  _sx = verts[best].x\n  _sy = verts[best].y\n}\n\n// PolyLocal support: verts in LOCAL, with frame (cx,cy, U/V, sx/sy)\nfunction setSupportPolyLocal(\n  dx: number, dy: number,\n  verts: { x: number, y: number }[],\n  cx: number, cy: number, ux: number, uy: number, vx: number, vy: number, sx: number, sy: number\n) {\n  if (!allFinite(dx, dy, cx, cy, ux, uy, vx, vy, sx, sy)) { _sx = NaN as any; _sy = NaN as any; return }\n  const kU = (dx * ux + dy * uy) * sx\n  const kV = (dx * vx + dy * vy) * sy\n  if (!allFinite(kU, kV)) { _sx = NaN as any; _sy = NaN as any; return }\n  let best = 0, bestDot = -Infinity\n  for (let i = 0, n = verts.length; i < n; i++) {\n    const s = kU * verts[i].x + kV * verts[i].y\n    if (!isFiniteNumber(s)) { _sx = NaN as any; _sy = NaN as any; return }\n    if (s > bestDot) { bestDot = s; best = i }\n  }\n  const lx = verts[best].x, ly = verts[best].y\n  _sx = cx + ux * (sx * lx) + vx * (sy * ly)\n  _sy = cy + uy * (sx * lx) + vy * (sy * ly)\n}\n\nfunction supportA(dx: number, dy: number) {\n  if (_supportAType === SupportType.Ellipse) setSupportEllipse(dx, dy, _Acx, _Acy, _Aux, _Auy, _Avx, _Avy, _Arx, _Ary)\n  else if (_supportAType === SupportType.OBB) setSupportOBB(dx, dy, _Acx, _Acy, _Aux, _Auy, _Avx, _Avy, _Ahx, _Ahy)\n  else if (_supportAType === SupportType.Circle) setSupportCircle(dx, dy, _Acx, _Acy, _Arr)\n  else if (_supportAType === SupportType.Poly) setSupportPoly(dx, dy, _Apoly!)\n  else if (_supportAType === SupportType.PolyLocal) setSupportPolyLocal(dx, dy, _Apoly!, _Acx, _Acy, _Aux, _Auy, _Avx, _Avy, _Arx, _Ary)\n  else { _sx = NaN as any; _sy = NaN as any }\n}\nfunction supportB(dx: number, dy: number) {\n  if (_supportBType === SupportType.Ellipse) setSupportEllipse(dx, dy, _Bcx, _Bcy, _Bux, _Buy, _Bvx, _Bvy, _Brx, _Bry)\n  else if (_supportBType === SupportType.OBB) setSupportOBB(dx, dy, _Bcx, _Bcy, _Bux, _Buy, _Bvx, _Bvy, _Bhx, _Bhy)\n  else if (_supportBType === SupportType.Circle) setSupportCircle(dx, dy, _Bcx, _Bcy, _Brr)\n  else if (_supportBType === SupportType.Poly) setSupportPoly(dx, dy, _Bpoly!)\n  else if (_supportBType === SupportType.PolyLocal) setSupportPolyLocal(dx, dy, _Bpoly!, _Bcx, _Bcy, _Bux, _Buy, _Bvx, _Bvy, _Brx, _Bry)\n  else { _sx = NaN as any; _sy = NaN as any }\n}\n\n// GJK core — returns true if intersection (robust; no allocations)\nfunction gjkIntersectsNoAlloc(): boolean {\n  // EPS guards degenerate directions/points\n  const EPS = 1e-9\n  const EPS2 = EPS * EPS\n\n  // simplex points (A = most recently added)\n  let ax = 0, ay = 0, bx = 0, by = 0, cx = 0, cy = 0\n  let n = 0\n\n  // search direction\n  let dx = 1, dy = 0\n\n  // Adds a new support point as A and shifts previous (C<-B, B<-A)\n  function addPointAsA() {\n    supportA(dx, dy); const pax = _sx, pay = _sy\n    supportB(-dx, -dy); const pbx = _sx, pby = _sy\n    if (!allFinite(pax, pay, pbx, pby)) { ax = ay = bx = by = cx = cy = NaN as any; return }\n\n    const px = pax - pbx, py = pay - pby\n    cx = bx; cy = by\n    bx = ax; by = ay\n    ax = px; ay = py\n    if (n < 3) n++\n  }\n\n  addPointAsA()\n  if (!allFinite(ax, ay)) return false\n  if (ax * ax + ay * ay <= EPS2) return true // origin exactly (or ~) hit\n  dx = -ax; dy = -ay\n\n  for (let iter = 0; iter < 32; iter++) {\n    const dLen2 = dx * dx + dy * dy\n    if (!isFiniteNumber(dLen2)) return false\n    if (dLen2 <= EPS2) return true // direction collapsed → enclosed\n\n    addPointAsA()\n    if (!allFinite(ax, ay, bx, by, cx, cy)) return false\n\n    // If new point A does not pass beyond origin along d, shapes are separated\n    const Ad = ax * dx + ay * dy\n    if (!isFiniteNumber(Ad)) return false\n    if (Ad <= 0) return false\n    if (ax * ax + ay * ay <= EPS2) return true\n\n    if (n === 2) {\n      // Segment (B-A). d = triple(AB, AO, AB)\n      const abx = bx - ax, aby = by - ay\n      const aox = -ax, aoy = -ay\n      const ac = abx * abx + aby * aby\n      const bc = aox * abx + aoy * aby\n      if (!allFinite(abx, aby, aox, aoy, ac, bc)) return false\n      dx = aox * ac - abx * bc\n      dy = aoy * ac - aby * bc\n      continue\n    }\n\n    // Triangle (C-B-A), A is the latest point\n    const abx = bx - ax, aby = by - ay\n    const acx = cx - ax, acy = cy - ay\n    const aox = -ax, aoy = -ay\n    if (!allFinite(abx, aby, acx, acy, aox, aoy)) return false\n\n    // abPerp = triple(AC, AO, AB)\n    const ac_ab = acx * abx + acy * aby\n    const ao_ab = aox * abx + aoy * aby\n    let t1x = aox * ac_ab - acx * ao_ab\n    let t1y = aoy * ac_ab - acy * ao_ab\n    if (!allFinite(ac_ab, ao_ab, t1x, t1y)) return false\n    if (t1x * aox + t1y * aoy > 0) {\n      // Origin is in the AB region: drop C -> segment(B-A)\n      cx = bx; cy = by; n = 2\n      dx = t1x; dy = t1y\n      continue\n    }\n\n    // acPerp = triple(AB, AO, AC)\n    const ab_ac = abx * acx + aby * acy\n    const ao_ac = aox * acx + aoy * acy\n    let t2x = aox * ab_ac - abx * ao_ac\n    let t2y = aoy * ab_ac - aby * ao_ac\n    if (!allFinite(ab_ac, ao_ac, t2x, t2y)) return false\n    if (t2x * aox + t2y * aoy > 0) {\n      // Origin is in the AC region: drop B -> segment(C-A)\n      bx = cx; by = cy; n = 2\n      dx = t2x; dy = t2y\n      continue\n    }\n\n    // Origin is inside triangle\n    return true\n  }\n\n  // Conservative fallback\n  return false\n}\n\n// =====================================================================================\n// Ellipse interactions via GJK (no allocations)\n// =====================================================================================\n\nfunction checkEllipseRectCollision(\n  e: EllipseCollider, te: WorldTransform,\n  r: RectangleCollider, tr: WorldTransform\n): boolean {\n  if (!validTransform(te) || !validTransform(tr) || !validEllipse(e) || !validRect(r)) return false\n\n  // A = Ellipse\n  const esx = te.scaleX, esy = te.scaleY\n  _Arx = abs(e.width * esx) * 0.5\n  _Ary = abs(e.height * esy) * 0.5\n  const ecs = te.cos, esn = te.sin\n  _Aux = ecs; _Auy = esn; _Avx = -esn; _Avy = ecs\n  const eox = (e.x || 0) * esx, eoy = (e.y || 0) * esy\n  _Acx = te.x + _Aux * eox + _Avx * eoy\n  _Acy = te.y + _Auy * eox + _Avy * eoy\n  _supportAType = SupportType.Ellipse\n  _Apoly = null\n\n  // B = OBB (rect)\n  const rsx = tr.scaleX, rsy = tr.scaleY\n  _Bhx = abs(r.width * rsx) * 0.5\n  _Bhy = abs(r.height * rsy) * 0.5\n  const rcs = tr.cos, rsn = tr.sin\n  _Bux = rcs; _Buy = rsn; _Bvx = -rsn; _Bvy = rcs\n  const rox = (r.x || 0) * rsx, roy = (r.y || 0) * rsy\n  _Bcx = tr.x + _Bux * rox + _Bvx * roy\n  _Bcy = tr.y + _Buy * rox + _Bvy * roy\n  _supportBType = SupportType.OBB\n  _Bpoly = null\n\n  if (!allFinite(_Arx, _Ary, _Aux, _Auy, _Avx, _Avy, _Acx, _Acy, _Bhx, _Bhy, _Bux, _Buy, _Bvx, _Bvy, _Bcx, _Bcy)) return false\n  return gjkIntersectsNoAlloc()\n}\n\nfunction checkEllipseCircleCollision(\n  e: EllipseCollider, te: WorldTransform,\n  c: CircleCollider, tc: WorldTransform\n): boolean {\n  if (!validTransform(te) || !validTransform(tc) || !validEllipse(e) || !validCircle(c)) return false\n\n  // A = Ellipse\n  const esx = te.scaleX, esy = te.scaleY\n  _Arx = abs(e.width * esx) * 0.5\n  _Ary = abs(e.height * esy) * 0.5\n  const ecs = te.cos, esn = te.sin\n  _Aux = ecs; _Auy = esn; _Avx = -esn; _Avy = ecs\n  const eox = (e.x || 0) * esx, eoy = (e.y || 0) * esy\n  _Acx = te.x + _Aux * eox + _Avx * eoy\n  _Acy = te.y + _Auy * eox + _Avy * eoy\n  _supportAType = SupportType.Ellipse\n  _Apoly = null\n\n  // B = Circle\n  circleCenterScratch(c, tc)\n  _Bcx = _ccx; _Bcy = _ccy\n  _Brr = circleScaledRadius(c, tc)\n  _supportBType = SupportType.Circle\n  _Bpoly = null\n\n  if (!allFinite(_Arx, _Ary, _Aux, _Auy, _Avx, _Avy, _Acx, _Acy, _Bcx, _Bcy, _Brr)) return false\n  return gjkIntersectsNoAlloc()\n}\n\nfunction checkEllipseEllipseCollision(\n  a: EllipseCollider, ta: WorldTransform,\n  b: EllipseCollider, tb: WorldTransform\n): boolean {\n  if (!validTransform(ta) || !validTransform(tb) || !validEllipse(a) || !validEllipse(b)) return false\n\n  // A\n  const asx = ta.scaleX, asy = ta.scaleY\n  _Arx = abs(a.width * asx) * 0.5\n  _Ary = abs(a.height * asy) * 0.5\n  const acs = ta.cos, asn = ta.sin\n  _Aux = acs; _Auy = asn; _Avx = -asn; _Avy = acs\n  const aox = (a.x || 0) * asx, aoy = (a.y || 0) * asy\n  _Acx = ta.x + _Aux * aox + _Avx * aoy\n  _Acy = ta.y + _Auy * aox + _Avy * aoy\n  _supportAType = SupportType.Ellipse\n  _Apoly = null\n\n  // B\n  const bsx = tb.scaleX, bsy = tb.scaleY\n  _Brx = abs(b.width * bsx) * 0.5\n  _Bry = abs(b.height * bsy) * 0.5\n  const bcs = tb.cos, bsn = tb.sin\n  _Bux = bcs; _Buy = bsn; _Bvx = -bsn; _Bvy = bcs\n  const box = (b.x || 0) * bsx, boy = (b.y || 0) * bsy\n  _Bcx = tb.x + _Bux * box + _Bvx * boy\n  _Bcy = tb.y + _Buy * box + _Bvy * boy\n  _supportBType = SupportType.Ellipse\n  _Bpoly = null\n\n  if (!allFinite(_Arx, _Ary, _Aux, _Auy, _Avx, _Avy, _Acx, _Acy, _Brx, _Bry, _Bux, _Buy, _Bvx, _Bvy, _Bcx, _Bcy)) return false\n  return gjkIntersectsNoAlloc()\n}\n\n// Poly–Ellipse via GJK (Poly in LOCAL + Transform, Ellipse in LOCAL + Transform)\nfunction checkPolyEllipseCollision(poly: PolygonCollider, tp: WorldTransform, e: EllipseCollider, te: WorldTransform): boolean {\n  if (!validTransform(tp) || !validTransform(te) || !validPoly(poly) || !validEllipse(e)) return false\n\n  // A = Poly (LOCAL + Transform) → use PolyLocal support; reuse A scratch slots\n  const psx = tp.scaleX, psy = tp.scaleY\n  const pcs = tp.cos, psn = tp.sin\n  const pux = pcs, puy = psn\n  const pvx = -psn, pvy = pcs\n  const pox = ((poly as any).x || 0) * psx\n  const poy = ((poly as any).y || 0) * psy\n  _Acx = tp.x + pux * pox + pvx * poy\n  _Acy = tp.y + puy * pox + pvy * poy\n  _Aux = pux; _Auy = puy; _Avx = pvx; _Avy = pvy\n  _Arx = psx; _Ary = psy\n  _Apoly = poly.vertices\n  _supportAType = SupportType.PolyLocal\n\n  // B = Ellipse\n  const esx = te.scaleX, esy = te.scaleY\n  _Brx = abs(e.width * esx) * 0.5\n  _Bry = abs(e.height * esy) * 0.5\n  const ecs = te.cos, esn = te.sin\n  _Bux = ecs; _Buy = esn; _Bvx = -esn; _Bvy = ecs\n  const eox = (e.x || 0) * esx, eoy = (e.y || 0) * esy\n  _Bcx = te.x + _Bux * eox + _Bvx * eoy\n  _Bcy = te.y + _Buy * eox + _Bvy * eoy\n  _Bpoly = null\n  _supportBType = SupportType.Ellipse\n\n  if (!allFinite(_Acx, _Acy, _Aux, _Auy, _Avx, _Avy, _Arx, _Ary, _Bcx, _Bcy, _Bux, _Buy, _Bvx, _Bvy, _Brx, _Bry)) return false\n  return gjkIntersectsNoAlloc()\n}\n\n// =====================================================================================\n// Dispatcher (no allocations)\n// =====================================================================================\n\nexport function checkCollision(ca: Collider, ta: WorldTransform, cb: Collider, tb: WorldTransform): boolean {\n  // global transform validity first\n  if (!validTransform(ta) || !validTransform(tb)) return false\n\n  // Rectangle–Rectangle\n  if (ca.type === ColliderType.Rectangle && cb.type === ColliderType.Rectangle)\n    return checkRectRectCollision(ca, ta, cb, tb)\n\n  // Circle–Circle\n  if (ca.type === ColliderType.Circle && cb.type === ColliderType.Circle)\n    return checkCircleCircleCollision(ca, ta, cb, tb)\n\n  // Rect–Circle (both orders)\n  if (ca.type === ColliderType.Rectangle && cb.type === ColliderType.Circle)\n    return checkRectCircleCollision(ca, ta, cb, tb)\n  if (ca.type === ColliderType.Circle && cb.type === ColliderType.Rectangle)\n    return checkRectCircleCollision(cb, tb, ca, ta)\n\n  // Polygon–Polygon (LOCAL + Transform)\n  if (ca.type === ColliderType.Polygon && cb.type === ColliderType.Polygon)\n    return checkPolyPolyCollision(ca, ta, cb, tb)\n\n  // Polygon–Circle (both orders; LOCAL + Transform for polygon)\n  if (ca.type === ColliderType.Polygon && cb.type === ColliderType.Circle)\n    return checkPolyCircleCollision(ca, ta, cb, tb)\n  if (ca.type === ColliderType.Circle && cb.type === ColliderType.Polygon)\n    return checkPolyCircleCollision(cb, tb, ca, ta)\n\n  // Polygon–Rect (both orders; LOCAL + Transform for polygon)\n  if (ca.type === ColliderType.Polygon && cb.type === ColliderType.Rectangle)\n    return checkPolyRectCollision(ca, ta, cb, tb)\n  if (ca.type === ColliderType.Rectangle && cb.type === ColliderType.Polygon)\n    return checkPolyRectCollision(cb, tb, ca, ta)\n\n  // Ellipse interactions via GJK\n  if (ca.type === ColliderType.Ellipse && cb.type === ColliderType.Rectangle)\n    return checkEllipseRectCollision(ca, ta, cb, tb)\n  if (ca.type === ColliderType.Rectangle && cb.type === ColliderType.Ellipse)\n    return checkEllipseRectCollision(cb, tb, ca, ta)\n\n  if (ca.type === ColliderType.Ellipse && cb.type === ColliderType.Circle)\n    return checkEllipseCircleCollision(ca, ta, cb, tb)\n  if (ca.type === ColliderType.Circle && cb.type === ColliderType.Ellipse)\n    return checkEllipseCircleCollision(cb, tb, ca, ta)\n\n  if (ca.type === ColliderType.Ellipse && cb.type === ColliderType.Ellipse)\n    return checkEllipseEllipseCollision(ca, ta, cb, tb)\n\n  // Polygon–Ellipse (both orders; polygon is LOCAL + Transform via PolyLocal support)\n  if (ca.type === ColliderType.Polygon && cb.type === ColliderType.Ellipse)\n    return checkPolyEllipseCollision(ca, ta, cb, tb)\n  if (ca.type === ColliderType.Ellipse && cb.type === ColliderType.Polygon)\n    return checkPolyEllipseCollision(cb, tb, ca, ta)\n\n  return false\n}\n"]}