{"version":3,"file":"bitmap-font.js","sourceRoot":"","sources":["../../src/loaders/bitmap-font.ts"],"names":[],"mappings":"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","sourcesContent":["import { XMLParser } from 'fast-xml-parser'\nimport { BitmapFont, Char } from '../bitmap-font'\nimport { Loader } from './loader'\nimport { textureLoader } from './texture'\n\nclass BitmapFontLoader extends Loader<BitmapFont> {\n  protected override async doLoad(id: number, fnt: string, src: string) {\n    const loadingPromise = (async () => {\n      const texture = await textureLoader.load(id, src)\n      if (!texture) {\n        console.error(`Failed to load texture: ${src}`)\n        return\n      }\n\n      const response = await fetch(fnt)\n      if (!response.ok) {\n        console.error(`Failed to load font xml: ${fnt}`)\n        return\n      }\n\n      try {\n        const text = await response.text()\n\n        this.loadingPromises.delete(id)\n\n        if (this.hasActiveRef(id)) {\n          if (this.cachedAssets.has(id)) {\n            textureLoader.release(id)\n            console.error(`Bitmap font already exists: ${fnt}`)\n          } else {\n\n            const parser = new XMLParser({\n              ignoreAttributes: false,\n              attributeNamePrefix: '',\n            })\n            const xml = parser.parse(text)\n\n            const info = xml.font?.info\n            const common = xml.font?.common\n            const charArr = xml.font?.chars?.char ?? []\n\n            const size = parseInt(info?.size ?? '16', 10)\n            const lineHeight = parseInt(common?.lineHeight ?? '32', 10)\n\n            const chars: Record<number, Char> = {}\n\n            for (const c of charArr) {\n              const idNum = parseInt(c.id, 10)\n              chars[idNum] = {\n                x: parseInt(c.x, 10),\n                y: parseInt(c.y, 10),\n                width: parseInt(c.width, 10),\n                height: parseInt(c.height, 10),\n                xoffset: parseInt(c.xoffset, 10),\n                yoffset: parseInt(c.yoffset, 10),\n                xadvance: parseInt(c.xadvance, 10),\n              }\n            }\n\n            const bitmapFont = { src, chars, texture, size, lineHeight }\n\n            this.cachedAssets.set(id, bitmapFont)\n            return bitmapFont\n          }\n        } else {\n          textureLoader.release(id)\n        }\n\n      } catch (error) {\n        console.error(`Failed to decode font xml: ${fnt}`, error)\n        this.loadingPromises.delete(id)\n      }\n    })()\n\n    this.loadingPromises.set(id, loadingPromise)\n    return await loadingPromise\n  }\n\n  protected override cleanup(id: number) {\n    textureLoader.release(id)\n  }\n}\n\nexport const bitmapFontLoader = new BitmapFontLoader()\n"]}