{"version":3,"file":"bitmap-font.js","sourceRoot":"","sources":["../../src/loaders/bitmap-font.ts"],"names":[],"mappings":"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","sourcesContent":["import { XMLParser } from 'fast-xml-parser'\nimport { BitmapFont, Char } from '../bitmap-font'\nimport { Loader } from './loader'\nimport { textureLoader } from './texture'\n\nclass BitmapFontLoader extends Loader<BitmapFont> {\n  protected override async doLoad(id: number, fnt: string, src: string) {\n    const loadingPromise = (async () => {\n      const texture = await textureLoader.load(id, src)\n      if (!texture) {\n        console.error(`Failed to load texture: ${src}`)\n        return\n      }\n\n      const response = await fetch(fnt)\n      if (!response.ok) {\n        console.error(`Failed to load font xml: ${fnt}`)\n        return\n      }\n\n      try {\n        const text = await response.text()\n\n        this.loadingPromises.delete(id)\n\n        if (this.hasActiveRef(id)) {\n          if (this.cachedAssets.has(id)) {\n            textureLoader.release(id)\n            console.error(`Bitmap font already exists: ${fnt}`)\n          } else {\n            // Parse XML using fast-xml-parser\n            const parser = new XMLParser({\n              ignoreAttributes: false,\n              attributeNamePrefix: '',\n              parseAttributeValue: true,\n              trimValues: true,\n            })\n            const xmlObj: any = parser.parse(text)\n\n            const infoEl = xmlObj?.font?.info\n            const commonEl = xmlObj?.font?.common\n            let charNodes = xmlObj?.font?.chars?.char ?? []\n\n            if (!Array.isArray(charNodes)) {\n              charNodes = [charNodes]\n            }\n\n            const size =\n              typeof infoEl?.size === 'number'\n                ? infoEl.size\n                : parseInt(infoEl?.size ?? '16', 10)\n\n            const lineHeight =\n              typeof commonEl?.lineHeight === 'number'\n                ? commonEl.lineHeight\n                : parseInt(commonEl?.lineHeight ?? '32', 10)\n\n            const chars: Record<number, Char> = {}\n\n            for (let i = 0; i < charNodes.length; i++) {\n              const ch = charNodes[i]\n              const charId = Number(ch.id)\n              const x = Number(ch.x)\n              const y = Number(ch.y)\n              const width = Number(ch.width)\n              const height = Number(ch.height)\n              const xoffset = Number(ch.xoffset)\n              const yoffset = Number(ch.yoffset)\n              const xadvance = Number(ch.xadvance)\n\n              chars[charId] = { x, y, width, height, xoffset, yoffset, xadvance }\n            }\n\n            const bitmapFont: BitmapFont = { src, chars, texture, size, lineHeight }\n\n            this.cachedAssets.set(id, bitmapFont)\n            return bitmapFont\n          }\n        } else {\n          textureLoader.release(id)\n        }\n      } catch (error) {\n        console.error(`Failed to decode font xml: ${fnt}`, error)\n        this.loadingPromises.delete(id)\n      }\n    })()\n\n    this.loadingPromises.set(id, loadingPromise)\n    return await loadingPromise\n  }\n\n  protected override cleanup(id: number) {\n    textureLoader.release(id)\n  }\n\n  override async load(id: number, fnt: string, src: string) {\n    return await super.load(id, fnt, src)\n  }\n}\n\nexport const bitmapFontLoader = new BitmapFontLoader()\n"]}