{"version":3,"file":"spritesheet.js","sourceRoot":"","sources":["../../src/loaders/spritesheet.ts"],"names":[],"mappings":"AACA,OAAO,EAAQ,WAAW,IAAI,eAAe,EAAwB,MAAM,SAAS,CAAA;AACpF,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAA;AACjC,OAAO,EAAE,aAAa,EAAE,MAAM,WAAW,CAAA;AAOzC,MAAM,iBAAkB,SAAQ,MAAuB;IAClC,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,GAAW,EAAE,KAAY;QACnE,MAAM,cAAc,GAAG,CAAC,KAAK,IAAI,EAAE;YACjC,MAAM,OAAO,GAAG,MAAM,aAAa,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,CAAA;YACjD,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,OAAO,CAAC,KAAK,CAAC,2BAA2B,GAAG,EAAE,CAAC,CAAA;gBAC/C,OAAM;YACR,CAAC;YAED,MAAM,MAAM,GAA+B,EAAE,CAAA;YAC7C,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;gBACxD,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAA;YAChC,CAAC;YACD,MAAM,UAAU,GAAmB,EAAE,CAAA;YACrC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC5D,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAA;YAChC,CAAC;YACD,MAAM,WAAW,GAAG,IAAI,eAAe,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,UAAU,EAAE,CAAC,CAAA;YAC5F,MAAM,WAAW,CAAC,KAAK,EAAE,CAAA;YAEzB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;YAE/B,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE,CAAC;gBAC1B,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;oBAC9B,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;oBACzB,OAAO,CAAC,KAAK,CAAC,+BAA+B,GAAG,EAAE,CAAC,CAAA;gBACrD,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,GAAG,EAAE,KAAK,EAAE,eAAe,EAAE,WAAW,EAAE,CAAA;oBACpD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;oBAC/B,OAAO,IAAI,CAAA;gBACb,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;YAC3B,CAAC;QACH,CAAC,CAAC,EAAE,CAAA;QAEJ,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,EAAE,cAAc,CAAC,CAAA;QAC5C,OAAO,MAAM,cAAc,CAAA;IAC7B,CAAC;IAEkB,OAAO,CAAC,EAAU,EAAE,EAAE,eAAe,EAAmB;QACzE,eAAe,CAAC,OAAO,EAAE,CAAA;QACzB,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;IAC3B,CAAC;CACF;AAED,MAAM,CAAC,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAA","sourcesContent":["import { Atlas } from '@hydraengine/shared'\nimport { Dict, Spritesheet as PixiSpritesheet, SpritesheetFrameData } from 'pixi.js'\nimport { Loader } from './loader'\nimport { textureLoader } from './texture'\n\nexport type SpritesheetData = {\n  atlas: Atlas,\n  pixiSpritesheet: PixiSpritesheet\n}\n\nclass SpritesheetLoader extends Loader<SpritesheetData> {\n  protected override async doLoad(id: number, src: string, atlas: Atlas) {\n    const loadingPromise = (async () => {\n      const texture = await textureLoader.load(id, src)\n      if (!texture) {\n        console.error(`Failed to load texture: ${src}`)\n        return\n      }\n\n      const frames: Dict<SpritesheetFrameData> = {}\n      for (const [key, value] of Object.entries(atlas.frames)) {\n        frames[key] = { frame: value }\n      }\n      const animations: Dict<string[]> = {}\n      for (const [key, value] of Object.entries(atlas.animations)) {\n        animations[key] = value.frames\n      }\n      const spritesheet = new PixiSpritesheet(texture, { frames, meta: { scale: 1 }, animations })\n      await spritesheet.parse()\n\n      this.loadingPromises.delete(id)\n\n      if (this.hasActiveRef(id)) {\n        if (this.cachedAssets.has(id)) {\n          textureLoader.release(id)\n          console.error(`Spritesheet already exists: ${src}`)\n        } else {\n          const data = { atlas, pixiSpritesheet: spritesheet }\n          this.cachedAssets.set(id, data)\n          return data\n        }\n      } else {\n        textureLoader.release(id)\n      }\n    })()\n\n    this.loadingPromises.set(id, loadingPromise)\n    return await loadingPromise\n  }\n\n  protected override cleanup(id: number, { pixiSpritesheet }: SpritesheetData) {\n    pixiSpritesheet.destroy()\n    textureLoader.release(id)\n  }\n}\n\nexport const spritesheetLoader = new SpritesheetLoader()\n"]}