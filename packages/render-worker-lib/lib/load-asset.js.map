{"version":3,"file":"load-asset.js","sourceRoot":"","sources":["../src/load-asset.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAA;AAC/C,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAA;AAExD,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAA;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAA;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAA;AAUjD,MAAM,gBAAgB,GAAqE;IACzF,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE;IACjF,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE;IAC3D,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE;CAC3E,CAAA;AAED,SAAS,gBAAgB,CAAC,IAAY;IACpC,OAAO,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAA;AAClE,CAAC;AAED,MAAM,aAAa,GAAG,IAAI,GAAG,EAAuB,CAAA;AAEpD,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,EAAU,EAAE,KAAkB;IAC5D,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QAC9B,MAAM,MAAM,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAA;QACtC,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,CAAC,IAAI,CAAC,8BAA8B,KAAK,EAAE,CAAC,CAAA;YACnD,OAAM;QACR,CAAC;QACD,aAAa,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,CAAA;QAC7B,MAAM,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAA;IAC9B,CAAC;SAAM,IAAI,OAAO,IAAI,KAAK,EAAE,CAAC;QAC5B,aAAa,CAAC,GAAG,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAA;QACxC,MAAM,iBAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,CAAA;IAC1D,CAAC;SAAM,IAAI,KAAK,IAAI,KAAK,EAAE,CAAC;QAC1B,aAAa,CAAC,GAAG,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAA;QACvC,MAAM,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAA;IACvD,CAAC;SAAM,CAAC;QACN,OAAO,CAAC,IAAI,CAAC,uBAAuB,KAAK,EAAE,CAAC,CAAA;IAC9C,CAAC;AACH,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,EAAU;IACrC,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;IACpC,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,CAAC,IAAI,CAAC,iCAAiC,EAAE,EAAE,CAAC,CAAA;QACnD,OAAM;IACR,CAAC;IACD,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;AACpB,CAAC","sourcesContent":["import { SpritesheetData } from 'pixi.js'\nimport { binaryLoader } from './loaders/binary'\nimport { bitmapFontLoader } from './loaders/bitmap-font'\nimport { Loader } from './loaders/loader'\nimport { spritesheetLoader } from './loaders/spritesheet'\nimport { textLoader } from './loaders/text'\nimport { textureLoader } from './loaders/texture'\n\nexport type AssetSource = string | {\n  src: string\n  atlas: SpritesheetData\n} | {\n  fnt: string\n  src: string\n}\n\nconst loaderForPathMap: Array<{ check: (path: string) => boolean, loader: Loader<any> }> = [\n  { check: (p) => p.endsWith('.json') || p.endsWith('.atlas'), loader: textLoader },\n  { check: (p) => p.endsWith('.skel'), loader: binaryLoader },\n  { check: (p) => /\\.(png|jpe?g|gif|webp)$/.test(p), loader: textureLoader },\n]\n\nfunction getLoaderForPath(path: string): Loader<any> | undefined {\n  return loaderForPathMap.find(({ check }) => check(path))?.loader\n}\n\nconst idToLoaderMap = new Map<number, Loader<any>>()\n\nexport async function loadAsset(id: number, asset: AssetSource): Promise<void> {\n  if (typeof asset === 'string') {\n    const loader = getLoaderForPath(asset)\n    if (!loader) {\n      console.warn(`No loader found for asset: ${asset}`)\n      return\n    }\n    idToLoaderMap.set(id, loader)\n    await loader.load(id, asset)\n  } else if ('atlas' in asset) {\n    idToLoaderMap.set(id, spritesheetLoader)\n    await spritesheetLoader.load(id, asset.src, asset.atlas)\n  } else if ('fnt' in asset) {\n    idToLoaderMap.set(id, bitmapFontLoader)\n    await bitmapFontLoader.load(id, asset.fnt, asset.src)\n  } else {\n    console.warn(`Unknown asset type: ${asset}`)\n  }\n}\n\nexport function releaseAsset(id: number): void {\n  const loader = idToLoaderMap.get(id)\n  if (!loader) {\n    console.warn(`No loader found for asset ID: ${id}`)\n    return\n  }\n  loader.release(id)\n}\n"]}