{"version":3,"file":"message-bridge.js","sourceRoot":"","sources":["../src/message-bridge.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAA;AAGrD,MAAM,OAAO,aAAc,SAAQ,YAEjC;IACA,MAAM,GAAG,IAAI,GAAG,EAAkB,CAAA;IAElC,YAAY,IAAiB;QAC3B,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,SAAS,GAAG,CAAC,KAAK,EAAE,EAAE;YACzB,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAA;YAE5B,IAAI,IAAI,KAAK,MAAM,EAAE,CAAC;gBACpB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACjD,CAAC;iBAEI,IAAI,IAAI,KAAK,kBAAkB,EAAE,CAAC;gBACrC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YACpE,CAAC;QACH,CAAC,CAAA;IACH,CAAC;IAED,OAAO,CAAC,EAAU;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;IAClC,CAAC;CACF","sourcesContent":["import { EventEmitter } from '@webtaku/event-emitter'\n\n\nexport class MessageBridge extends EventEmitter<{\n  animationChanged: (id: number, animation: number) => void\n}> {\n  #texts = new Map<number, string>()\n\n  constructor(port: MessagePort) {\n    super()\n    port.onmessage = (event) => {\n      const type = event.data.type\n\n      if (type === 'text') {\n        this.#texts.set(event.data.id, event.data.text)\n      }\n\n      else if (type === 'animationChanged') {\n        this.emit('animationChanged', event.data.id, event.data.animation)\n      }\n    }\n  }\n\n  getText(id: number) {\n    return this.#texts.get(id) ?? ''\n  }\n}\n"]}