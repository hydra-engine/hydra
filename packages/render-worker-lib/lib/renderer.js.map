{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../src/renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { AssetSource, Atlas, NONE, ObjectStateTree, ObjectType, ROOT, ShapeDescriptor } from '@hydraengine/shared'\nimport { AutoDetectOptions, ColorSource, Container, DOMAdapter, Renderer as PixiRenderer, WebWorkerAdapter, autoDetectRenderer } from 'pixi.js'\nimport { Camera } from './camera'\nimport { MessageBridge } from './message-bridge'\nimport { AnimatedSpriteNode } from './rendering-node/animated-sprite'\nimport { BitmapTextNode } from './rendering-node/bitmap-text'\nimport { CircleNode } from './rendering-node/circle'\nimport { RectangleNode } from './rendering-node/rectangle'\nimport { RenderableNode } from './rendering-node/renderable'\nimport { SpriteNode } from './rendering-node/sprite'\n\nDOMAdapter.set(WebWorkerAdapter)\n\nexport type RendererOptions = {\n  logicalWidth?: number\n  logicalHeight?: number\n  backgroundColor?: ColorSource\n  backgroundAlpha?: number\n  layers?: { id: number; drawOrder: number }[]\n}\n\nexport class Renderer {\n  readonly #offscreenCanvas: OffscreenCanvas\n  readonly #devicePixelRatio: number\n  readonly #animationNames: Record<number, string>\n  readonly #assetSources: Record<number, AssetSource>\n  readonly #shapeDescriptors: Record<number, ShapeDescriptor>\n  readonly #stateTree: ObjectStateTree\n  readonly #messageBridge: MessageBridge\n\n  readonly #logicalWidth?: number\n  readonly #logicalHeight?: number\n  readonly #backgroundColor?: ColorSource\n  readonly #backgroundAlpha?: number\n\n  #pixiRenderer?: PixiRenderer\n  camera = new Camera()\n  //#layers: { [name: string]: Layer } = {}\n  #root = new Container({ sortableChildren: true })\n  #nodes = new Map<number, RenderableNode>()\n  #renderPass = 0\n\n  canvasWidth = 0\n  canvasHeight = 0\n  canvasLeft = 0\n  canvasTop = 0\n  viewportScale = 1\n  centerX = 0\n  centerY = 0\n\n  constructor(\n    readonly offscreenCanvas: OffscreenCanvas,\n    readonly devicePixelRatio: number,\n    readonly animationNames: Record<number, string>,\n    readonly assetSources: Record<number, AssetSource>,\n    readonly shapeDescriptors: Record<number, ShapeDescriptor>,\n    readonly stateTree: ObjectStateTree,\n    readonly messageBridge: MessageBridge,\n    readonly options?: RendererOptions,\n  ) {\n    this.#offscreenCanvas = offscreenCanvas\n    this.#devicePixelRatio = devicePixelRatio\n    this.#animationNames = animationNames\n    this.#assetSources = assetSources\n    this.#shapeDescriptors = shapeDescriptors\n    this.#stateTree = stateTree\n    this.#messageBridge = messageBridge\n\n    if (options) {\n      this.#logicalWidth = options.logicalWidth\n      this.#logicalHeight = options.logicalHeight\n      this.#backgroundColor = options.backgroundColor\n      this.#backgroundAlpha = options.backgroundAlpha\n    }\n\n    messageBridge.on('animationChanged', this.#handleAnimationChanged)\n\n    this.#init()\n  }\n\n  #handleAnimationChanged = (id: number, animationId: number) => {\n    const node = this.#nodes.get(id)\n    if (node instanceof AnimatedSpriteNode) {\n      node.changeAnimation(this.#animationNames[animationId])\n    }\n  }\n\n  async #init() {\n    const options: Partial<AutoDetectOptions> = {\n      canvas: this.#offscreenCanvas,\n      eventMode: 'none',\n      resolution: this.#devicePixelRatio,\n    }\n\n    if (this.#logicalWidth) options.width = this.#logicalWidth\n    if (this.#logicalHeight) options.height = this.#logicalHeight\n    if (this.#backgroundColor) options.backgroundColor = this.#backgroundColor\n    if (this.#backgroundAlpha) options.backgroundAlpha = this.#backgroundAlpha\n\n    this.#pixiRenderer = await autoDetectRenderer(options)\n  }\n\n  #updatePosition() {\n    const S = this.camera.scale\n    this.#root.scale = S\n    this.#root.position.set(\n      this.centerX - this.camera.x * S,\n      this.centerY - this.camera.y * S\n    )\n  }\n\n  resize(containerWidth: number, containerHeight: number) {\n    const canvasWidth = this.#logicalWidth ?? containerWidth\n    const canvasHeight = this.#logicalHeight ?? containerHeight\n    this.canvasWidth = canvasWidth\n    this.canvasHeight = canvasHeight\n\n    this.centerX = canvasWidth / 2\n    this.centerY = canvasHeight / 2\n    this.#updatePosition()\n\n    const S = Math.min(containerWidth / canvasWidth, containerHeight / canvasHeight)\n    this.viewportScale = S\n\n    const displayWidth = canvasWidth * S\n    const displayHeight = canvasHeight * S\n\n    const canvasLeft = (containerWidth - displayWidth) / 2\n    const canvasTop = (containerHeight - displayHeight) / 2\n    this.canvasLeft = canvasLeft\n    this.canvasTop = canvasTop\n\n    this.#pixiRenderer?.resize(canvasWidth, canvasHeight)\n  }\n\n  render() {\n    const renderer = this.#pixiRenderer\n    if (!renderer) return\n\n    const pass = ++this.#renderPass\n    let zIndex = 0\n\n    const tree = this.#stateTree\n    tree.forEach((id) => {\n      if (id === ROOT) return\n\n      const objectType = tree.getObjectType(id)\n\n      let node = this.#nodes.get(id)\n      if (!node) {\n        if (objectType === ObjectType.Sprite) {\n          const assetId = tree.getAssetId(id)\n          if (assetId !== NONE) {\n            node = new SpriteNode(assetId, this.#assetSources[assetId] as string)\n          }\n        }\n\n        else if (objectType === ObjectType.AnimatedSprite) {\n          const assetId = tree.getAssetId(id)\n          const animation = this.#animationNames[tree.getAnimationId(id)]\n          const source = this.#assetSources[assetId] as { src: string; atlas: Atlas }\n          if (assetId !== NONE && animation && source) {\n            node = new AnimatedSpriteNode(assetId, source.src, source.atlas, animation)\n          }\n        }\n\n        else if (objectType === ObjectType.Rectangle) {\n          const width = tree.getWidth(id)\n          const height = tree.getHeight(id)\n          const shapeId = tree.getShapeId(id)\n          const shapeDescriptor = this.#shapeDescriptors[shapeId]\n          if (width !== NONE && height !== NONE && shapeDescriptor) {\n            node = new RectangleNode(width, height, shapeDescriptor.fill, shapeDescriptor.stroke)\n          }\n        }\n\n        else if (objectType === ObjectType.Circle) {\n          const radius = tree.getRadius(id)\n          const shapeId = tree.getShapeId(id)\n          const shapeDescriptor = this.#shapeDescriptors[shapeId]\n          if (radius !== NONE && shapeDescriptor) {\n            node = new CircleNode(radius, shapeDescriptor.fill, shapeDescriptor.stroke)\n          }\n        }\n\n        else if (objectType === ObjectType.BitmapText) {\n          const assetId = tree.getAssetId(id)\n          const source = this.#assetSources[assetId] as { fnt: string; src: string }\n          if (assetId !== NONE && source) {\n            node = new BitmapTextNode(assetId, source.fnt, source.src)\n          }\n        }\n\n        if (node) {\n          this.#nodes.set(id, node)\n          this.#root.addChild(node.pixiContainer)\n        }\n      }\n\n      if (node) {\n        const pc = node.pixiContainer\n        pc.position.set(tree.getWorldX(id), tree.getWorldY(id))\n        pc.scale.set(tree.getWorldScaleX(id), tree.getWorldScaleY(id))\n        pc.rotation = tree.getWorldRotation(id)\n        pc.alpha = tree.getWorldAlpha(id)\n\n        const tint = tree.getTint(id)\n        pc.tint = tint === 0 ? 0xffffff : tint - 1\n        pc.zIndex = zIndex++\n\n        if (objectType === ObjectType.AnimatedSprite) {\n          const animation = this.#animationNames[tree.getAnimationId(id)]\n          if (animation) (node as AnimatedSpriteNode).animation = animation\n        }\n\n        if (objectType === ObjectType.BitmapText) {\n          (node as BitmapTextNode).text = this.#messageBridge.getText(id)\n        }\n\n        node.seenPass = pass\n      }\n    })\n\n    for (const [id, node] of this.#nodes) {\n      if (node.seenPass !== pass) {\n        node.remove()\n        this.#nodes.delete(id)\n      }\n    }\n\n    renderer.render(this.#root)\n  }\n}\n"]}