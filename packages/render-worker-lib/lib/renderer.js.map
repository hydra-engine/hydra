{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../src/renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { ObjectStateTree, ObjectType, ROOT_ID } from '@hydraengine/shared'\nimport { AutoDetectOptions, Container, DOMAdapter, Renderer as PixiRenderer, WebWorkerAdapter, autoDetectRenderer } from 'pixi.js'\nimport { AnimatedSpriteNode } from './rendering-node/animated-sprite'\nimport { RenderableNode } from './rendering-node/renderable'\nimport { SpriteNode } from './rendering-node/sprite'\n\nDOMAdapter.set(WebWorkerAdapter)\n\nexport class Renderer {\n  readonly #offscreenCanvas: OffscreenCanvas\n  readonly #devicePixelRatio: number\n  readonly #animationNames: Record<number, string>\n  readonly #stateTree: ObjectStateTree\n\n  #pixiRenderer?: PixiRenderer\n  #root = new Container({ sortableChildren: true })\n  #nodes = new Map<number, RenderableNode>()\n  #renderPass = 0\n\n  constructor(\n    readonly offscreenCanvas: OffscreenCanvas,\n    readonly devicePixelRatio: number,\n    readonly animationNames: Record<number, string>,\n    readonly stateTree: ObjectStateTree,\n  ) {\n    this.#offscreenCanvas = offscreenCanvas\n    this.#devicePixelRatio = devicePixelRatio\n    this.#animationNames = animationNames\n    this.#stateTree = stateTree\n    this.#init()\n  }\n\n  async #init() {\n    const options: Partial<AutoDetectOptions> = {\n      canvas: this.#offscreenCanvas,\n      eventMode: 'none',\n      resolution: this.#devicePixelRatio,\n    }\n\n    this.#pixiRenderer = await autoDetectRenderer(options)\n  }\n\n  render() {\n    const renderer = this.#pixiRenderer\n    if (!renderer) return\n\n    const pass = ++this.#renderPass\n    let zIndex = 0\n\n    const tree = this.#stateTree\n    tree.forEach((id) => {\n      if (id === ROOT_ID) return\n\n      const objectType = tree.getObjectType(id)\n\n      let node = this.#nodes.get(id)\n      if (!node) {\n        if (objectType === ObjectType.Sprite) {\n          const assetId = tree.getAssetId(id)\n          node = new SpriteNode(assetId)\n        } else if (objectType === ObjectType.AnimatedSprite) {\n          const assetId = tree.getAssetId(id)\n          const animation = this.#animationNames[tree.getAnimationId(id)]\n          const fps = tree.getFps(id)\n          const loop = tree.getLoop(id)\n          node = new AnimatedSpriteNode(assetId, animation, fps, loop)\n        } else {\n          node = new RenderableNode()\n        }\n\n        this.#nodes.set(id, node)\n        this.#root.addChild(node.pixiContainer)\n      }\n\n      const pc = node.pixiContainer\n      pc.x = tree.getX(id)\n      pc.y = tree.getY(id)\n      pc.zIndex = zIndex++\n\n      node.seenPass = pass\n    })\n\n    for (const [id, node] of this.#nodes) {\n      if (node.seenPass !== pass) {\n        this.#root.removeChild(node.pixiContainer)\n        this.#nodes.delete(id)\n      }\n    }\n\n    renderer.render(this.#root)\n  }\n}\n"]}